function init(){var e;$("#toggle").bind({click:function(){e?(e.destroy(),e=null,$(".location").html("BuildHomeLtd.  Street Name 123   23 45 Cityname")):(e=new ymaps.Map("map",{center:[50.42562807,30.533566],zoom:16},{searchControlProvider:"yandex#search"}),$(".location").html('<span class="hide">Скрыть карту</span>'))}})}!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t,n){if(fe.isFunction(t))return fe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return fe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(Ce.test(t))return fe.filter(t,e,n);t=fe.filter(t,e)}return fe.grep(e,function(e){return fe.inArray(e,t)>-1!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function a(e){var t={};return fe.each(e.match(ze)||[],function(e,n){t[n]=!0}),t}function o(){re.addEventListener?(re.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s)):(re.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(re.addEventListener||"load"===e.event.type||"complete"===re.readyState)&&(o(),fe.ready())}function l(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(He,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Ae.test(n)?fe.parseJSON(n):n)}catch(e){}fe.data(e,t,n)}else n=void 0}return n}function d(e){var t;for(t in e)if(("data"!==t||!fe.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function p(e,t,n,r){if(Pe(e)){var i,a,o=fe.expando,s=e.nodeType,l=s?fe.cache:e,d=s?e[o]:e[o]&&o;if(d&&l[d]&&(r||l[d].data)||void 0!==n||"string"!=typeof t)return d||(d=s?e[o]=ne.pop()||fe.guid++:o),l[d]||(l[d]=s?{}:{toJSON:fe.noop}),"object"!=typeof t&&"function"!=typeof t||(r?l[d]=fe.extend(l[d],t):l[d].data=fe.extend(l[d].data,t)),a=l[d],r||(a.data||(a.data={}),a=a.data),void 0!==n&&(a[fe.camelCase(t)]=n),"string"==typeof t?(i=a[t],null==i&&(i=a[fe.camelCase(t)])):i=a,i}}function u(e,t,n){if(Pe(e)){var r,i,a=e.nodeType,o=a?fe.cache:e,s=a?e[fe.expando]:fe.expando;if(o[s]){if(t&&(r=n?o[s]:o[s].data)){fe.isArray(t)?t=t.concat(fe.map(t,fe.camelCase)):t in r?t=[t]:(t=fe.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!d(r):!fe.isEmptyObject(r))return}(n||(delete o[s].data,d(o[s])))&&(a?fe.cleanData([e],!0):ue.deleteExpando||o!=o.window?delete o[s]:o[s]=void 0)}}}function c(e,t,n,r){var i,a=1,o=20,s=r?function(){return r.cur()}:function(){return fe.css(e,t,"")},l=s(),d=n&&n[3]||(fe.cssNumber[t]?"":"px"),p=(fe.cssNumber[t]||"px"!==d&&+l)&&Be.exec(fe.css(e,t));if(p&&p[3]!==d){d=d||p[3],n=n||[],p=+l||1;do a=a||".5",p/=a,fe.style(e,t,p+d);while(a!==(a=s()/l)&&1!==a&&--o)}return n&&(p=+p||+l||0,i=n[1]?p+(n[1]+1)*n[2]:+n[2],r&&(r.unit=d,r.start=p,r.end=i)),i}function f(e){var t=Ge.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function h(e,t){var n,r,i=0,a="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!a)for(a=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||fe.nodeName(r,t)?a.push(r):fe.merge(a,h(r,t));return void 0===t||t&&fe.nodeName(e,t)?fe.merge([e],a):a}function m(e,t){for(var n,r=0;null!=(n=e[r]);r++)fe._data(n,"globalEval",!t||fe._data(t[r],"globalEval"))}function g(e){Re.test(e.type)&&(e.defaultChecked=e.checked)}function v(e,t,n,r,i){for(var a,o,s,l,d,p,u,c=e.length,v=f(t),y=[],w=0;w<c;w++)if(o=e[w],o||0===o)if("object"===fe.type(o))fe.merge(y,o.nodeType?[o]:o);else if($e.test(o)){for(l=l||v.appendChild(t.createElement("div")),d=(_e.exec(o)||["",""])[1].toLowerCase(),u=Xe[d]||Xe._default,l.innerHTML=u[1]+fe.htmlPrefilter(o)+u[2],a=u[0];a--;)l=l.lastChild;if(!ue.leadingWhitespace&&We.test(o)&&y.push(t.createTextNode(We.exec(o)[0])),!ue.tbody)for(o="table"!==d||Ve.test(o)?"<table>"!==u[1]||Ve.test(o)?0:l:l.firstChild,a=o&&o.childNodes.length;a--;)fe.nodeName(p=o.childNodes[a],"tbody")&&!p.childNodes.length&&o.removeChild(p);for(fe.merge(y,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=v.lastChild}else y.push(t.createTextNode(o));for(l&&v.removeChild(l),ue.appendChecked||fe.grep(h(y,"input"),g),w=0;o=y[w++];)if(r&&fe.inArray(o,r)>-1)i&&i.push(o);else if(s=fe.contains(o.ownerDocument,o),l=h(v.appendChild(o),"script"),s&&m(l),n)for(a=0;o=l[a++];)Fe.test(o.type||"")&&n.push(o);return l=null,v}function y(){return!0}function w(){return!1}function b(){try{return re.activeElement}catch(e){}}function x(e,t,n,r,i,a){var o,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)x(e,s,n,r,t[s],a);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=w;else if(!i)return e;return 1===a&&(o=i,i=function(e){return fe().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,i,r,n)})}function T(e,t){return fe.nodeName(e,"table")&&fe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function C(e){return e.type=(null!==fe.find.attr(e,"type"))+"/"+e.type,e}function S(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function E(e,t){if(1===t.nodeType&&fe.hasData(e)){var n,r,i,a=fe._data(e),o=fe._data(t,a),s=a.events;if(s){delete o.handle,o.events={};for(n in s)for(r=0,i=s[n].length;r<i;r++)fe.event.add(t,n,s[n][r])}o.data&&(o.data=fe.extend({},o.data))}}function k(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ue.noCloneEvent&&t[fe.expando]){i=fe._data(t);for(r in i.events)fe.removeEvent(t,r,i.handle);t.removeAttribute(fe.expando)}"script"===n&&t.text!==e.text?(C(t).text=e.text,S(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ue.html5Clone&&e.innerHTML&&!fe.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Re.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function M(e,t,n,r){t=ae.apply([],t);var i,a,o,s,l,d,p=0,u=e.length,c=u-1,f=t[0],m=fe.isFunction(f);if(m||u>1&&"string"==typeof f&&!ue.checkClone&&rt.test(f))return e.each(function(i){var a=e.eq(i);m&&(t[0]=f.call(this,i,a.html())),M(a,t,n,r)});if(u&&(d=v(t,e[0].ownerDocument,!1,e,r),i=d.firstChild,1===d.childNodes.length&&(d=i),i||r)){for(s=fe.map(h(d,"script"),C),o=s.length;p<u;p++)a=d,p!==c&&(a=fe.clone(a,!0,!0),o&&fe.merge(s,h(a,"script"))),n.call(e[p],a,p);if(o)for(l=s[s.length-1].ownerDocument,fe.map(s,S),p=0;p<o;p++)a=s[p],Fe.test(a.type||"")&&!fe._data(a,"globalEval")&&fe.contains(l,a)&&(a.src?fe._evalUrl&&fe._evalUrl(a.src):fe.globalEval((a.text||a.textContent||a.innerHTML||"").replace(at,"")));d=i=null}return e}function N(e,t,n){for(var r,i=t?fe.filter(t,e):e,a=0;null!=(r=i[a]);a++)n||1!==r.nodeType||fe.cleanData(h(r)),r.parentNode&&(n&&fe.contains(r.ownerDocument,r)&&m(h(r,"script")),r.parentNode.removeChild(r));return e}function z(e,t){var n=fe(t.createElement(e)).appendTo(t.body),r=fe.css(n[0],"display");return n.detach(),r}function L(e){var t=re,n=dt[e];return n||(n=z(e,t),"none"!==n&&n||(lt=(lt||fe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(lt[0].contentWindow||lt[0].contentDocument).document,t.write(),t.close(),n=z(e,t),lt.detach()),dt[e]=n),n}function D(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function P(e){if(e in St)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=Ct.length;n--;)if(e=Ct[n]+t,e in St)return e}function A(e,t){for(var n,r,i,a=[],o=0,s=e.length;o<s;o++)r=e[o],r.style&&(a[o]=fe._data(r,"olddisplay"),n=r.style.display,t?(a[o]||"none"!==n||(r.style.display=""),""===r.style.display&&je(r)&&(a[o]=fe._data(r,"olddisplay",L(r.nodeName)))):(i=je(r),(n&&"none"!==n||!i)&&fe._data(r,"olddisplay",i?n:fe.css(r,"display"))));for(o=0;o<s;o++)r=e[o],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?a[o]||"":"none"));return e}function H(e,t,n){var r=bt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function I(e,t,n,r,i){for(var a=n===(r?"border":"content")?4:"width"===t?1:0,o=0;a<4;a+=2)"margin"===n&&(o+=fe.css(e,n+Oe[a],!0,i)),r?("content"===n&&(o-=fe.css(e,"padding"+Oe[a],!0,i)),"margin"!==n&&(o-=fe.css(e,"border"+Oe[a]+"Width",!0,i))):(o+=fe.css(e,"padding"+Oe[a],!0,i),"padding"!==n&&(o+=fe.css(e,"border"+Oe[a]+"Width",!0,i)));return o}function B(t,n,r){var i=!0,a="width"===n?t.offsetWidth:t.offsetHeight,o=ht(t),s=ue.boxSizing&&"border-box"===fe.css(t,"boxSizing",!1,o);if(re.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(a=Math.round(100*t.getBoundingClientRect()[n])),a<=0||null==a){if(a=mt(t,n,o),(a<0||null==a)&&(a=t.style[n]),ut.test(a))return a;i=s&&(ue.boxSizingReliable()||a===t.style[n]),a=parseFloat(a)||0}return a+I(t,n,r||(s?"border":"content"),i,o)+"px"}function O(e,t,n,r,i){return new O.prototype.init(e,t,n,r,i)}function j(){return e.setTimeout(function(){Et=void 0}),Et=fe.now()}function q(e,t){var n,r={height:e},i=0;for(t=t?1:0;i<4;i+=2-t)n=Oe[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function R(e,t,n){for(var r,i=(W.tweeners[t]||[]).concat(W.tweeners["*"]),a=0,o=i.length;a<o;a++)if(r=i[a].call(n,t,e))return r}function _(e,t,n){var r,i,a,o,s,l,d,p,u=this,c={},f=e.style,h=e.nodeType&&je(e),m=fe._data(e,"fxshow");n.queue||(s=fe._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],d=fe.css(e,"display"),p="none"===d?fe._data(e,"olddisplay")||L(e.nodeName):d,"inline"===p&&"none"===fe.css(e,"float")&&(ue.inlineBlockNeedsLayout&&"inline"!==L(e.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",ue.shrinkWrapBlocks()||u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Mt.exec(i)){if(delete t[r],a=a||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;h=!0}c[r]=m&&m[r]||fe.style(e,r)}else d=void 0;if(fe.isEmptyObject(c))"inline"===("none"===d?L(e.nodeName):d)&&(f.display=d);else{m?"hidden"in m&&(h=m.hidden):m=fe._data(e,"fxshow",{}),a&&(m.hidden=!h),h?fe(e).show():u.done(function(){fe(e).hide()}),u.done(function(){var t;fe._removeData(e,"fxshow");for(t in c)fe.style(e,t,c[t])});for(r in c)o=R(h?m[r]:0,r,u),r in m||(m[r]=o.start,h&&(o.end=o.start,o.start="width"===r||"height"===r?1:0))}}function F(e,t){var n,r,i,a,o;for(n in e)if(r=fe.camelCase(n),i=t[r],a=e[n],fe.isArray(a)&&(i=a[1],a=e[n]=a[0]),n!==r&&(e[r]=a,delete e[n]),o=fe.cssHooks[r],o&&"expand"in o){a=o.expand(a),delete e[r];for(n in a)n in e||(e[n]=a[n],t[n]=i)}else t[r]=i}function W(e,t,n){var r,i,a=0,o=W.prefilters.length,s=fe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=Et||j(),n=Math.max(0,d.startTime+d.duration-t),r=n/d.duration||0,a=1-r,o=0,l=d.tweens.length;o<l;o++)d.tweens[o].run(a);return s.notifyWith(e,[d,a,n]),a<1&&l?n:(s.resolveWith(e,[d]),!1)},d=s.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:Et||j(),duration:n.duration,tweens:[],createTween:function(t,n){var r=fe.Tween(e,d.opts,t,n,d.opts.specialEasing[t]||d.opts.easing);return d.tweens.push(r),r},stop:function(t){var n=0,r=t?d.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)d.tweens[n].run(1);return t?(s.notifyWith(e,[d,1,0]),s.resolveWith(e,[d,t])):s.rejectWith(e,[d,t]),this}}),p=d.props;for(F(p,d.opts.specialEasing);a<o;a++)if(r=W.prefilters[a].call(d,e,p,d.opts))return fe.isFunction(r.stop)&&(fe._queueHooks(d.elem,d.opts.queue).stop=fe.proxy(r.stop,r)),r;return fe.map(p,R,d),fe.isFunction(d.opts.start)&&d.opts.start.call(e,d),fe.fx.timer(fe.extend(l,{elem:e,anim:d,queue:d.opts.queue})),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always)}function G(e){return fe.attr(e,"class")||""}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,a=t.toLowerCase().match(ze)||[];if(fe.isFunction(n))for(;r=a[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function $(e,t,n,r){function i(s){var l;return a[s]=!0,fe.each(e[s]||[],function(e,s){var d=s(t,n,r);return"string"!=typeof d||o||a[d]?o?!(l=d):void 0:(t.dataTypes.unshift(d),i(d),!1)}),l}var a={},o=e===Jt;return i(t.dataTypes[0])||!a["*"]&&i("*")}function V(e,t){var n,r,i=fe.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&fe.extend(!0,e,n),e}function Y(e,t,n){for(var r,i,a,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)a=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){a=o;break}r||(r=o)}a=a||r}if(a)return a!==l[0]&&l.unshift(a),n[a]}function U(e,t,n,r){var i,a,o,s,l,d={},p=e.dataTypes.slice();if(p[1])for(o in e.converters)d[o.toLowerCase()]=e.converters[o];for(a=p.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=p.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(o=d[l+" "+a]||d["* "+a],!o)for(i in d)if(s=i.split(" "),s[1]===a&&(o=d[l+" "+s[0]]||d["* "+s[0]])){o===!0?o=d[i]:d[i]!==!0&&(a=s[0],p.unshift(s[1]));break}if(o!==!0)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}function K(e){return e.style&&e.style.display||fe.css(e,"display")}function Q(e){for(;e&&1===e.nodeType;){if("none"===K(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}function J(e,t,n,r){var i;if(fe.isArray(t))fe.each(t,function(t,i){n||rn.test(e)?r(e,i):J(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==fe.type(t))r(e,t);else for(i in t)J(e+"["+i+"]",t[i],n,r)}function Z(){try{return new e.XMLHttpRequest}catch(e){}}function ee(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function te(e){return fe.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var ne=[],re=e.document,ie=ne.slice,ae=ne.concat,oe=ne.push,se=ne.indexOf,le={},de=le.toString,pe=le.hasOwnProperty,ue={},ce="1.12.3",fe=function(e,t){return new fe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ge=/-([\da-z])/gi,ve=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:ce,constructor:fe,selector:"",length:0,toArray:function(){return ie.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:ie.call(this)},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ne.sort,splice:ne.splice},fe.extend=fe.fn.extend=function(){var e,t,n,r,i,a,o=arguments[0]||{},s=1,l=arguments.length,d=!1;for("boolean"==typeof o&&(d=o,o=arguments[s]||{},s++),"object"==typeof o||fe.isFunction(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(i=arguments[s]))for(r in i)e=o[r],n=i[r],o!==n&&(d&&n&&(fe.isPlainObject(n)||(t=fe.isArray(n)))?(t?(t=!1,a=e&&fe.isArray(e)?e:[]):a=e&&fe.isPlainObject(e)?e:{},o[r]=fe.extend(d,a,n)):void 0!==n&&(o[r]=n));return o},fe.extend({expando:"jQuery"+(ce+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isArray:Array.isArray||function(e){return"array"===fe.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!fe.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==fe.type(e)||e.nodeType||fe.isWindow(e))return!1;try{if(e.constructor&&!pe.call(e,"constructor")&&!pe.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!ue.ownFirst)for(t in e)return pe.call(e,t);for(t in e);return void 0===t||pe.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[de.call(e)]||"object":typeof e},globalEval:function(t){t&&fe.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(me,"ms-").replace(ge,ve)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;i<r&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?fe.merge(r,"string"==typeof e?[e]:e):oe.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(se)return se.call(t,e,n);for(r=t.length,n=n?n<0?Math.max(0,r+n):n:0;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],a=0,o=e.length,s=!n;a<o;a++)r=!t(e[a],a),r!==s&&i.push(e[a]);return i},map:function(e,t,r){var i,a,o=0,s=[];if(n(e))for(i=e.length;o<i;o++)a=t(e[o],o,r),null!=a&&s.push(a);else for(o in e)a=t(e[o],o,r),null!=a&&s.push(a);return ae.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(i=e[t],t=e,e=i),fe.isFunction(e))return n=ie.call(arguments,2),r=function(){return e.apply(t||this,n.concat(ie.call(arguments)))},r.guid=e.guid=e.guid||fe.guid++,r},now:function(){return+new Date},support:ue}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ne[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,r){var i,a,o,s,l,d,u,f,h=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!r&&((t?t.ownerDocument||t:R)!==P&&D(t),t=t||P,H)){if(11!==m&&(d=ve.exec(e)))if(i=d[1]){if(9===m){if(!(o=t.getElementById(i)))return n;if(o.id===i)return n.push(o),n}else if(h&&(o=h.getElementById(i))&&j(t,o)&&o.id===i)return n.push(o),n}else{if(d[2])return J.apply(n,t.getElementsByTagName(e)),n;if((i=d[3])&&x.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!X[e+" "]&&(!I||!I.test(e))){if(1!==m)h=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(we,"\\$&"):t.setAttribute("id",s=q),u=E(e),a=u.length,l=ce.test(s)?"#"+s:"[id='"+s+"']";a--;)u[a]=l+" "+c(u[a]);f=u.join(","),h=ye.test(e)&&p(t.parentNode)||t}if(f)try{return J.apply(n,h.querySelectorAll(f)),n}catch(e){}finally{s===q&&t.removeAttribute("id")}}}return M(e.replace(se,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[q]=!0,e}function i(e){var t=P.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function a(e,t){for(var n=e.split("|"),r=n.length;r--;)T.attrHandle[n[r]]=t}function o(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function d(e){return r(function(t){return t=+t,r(function(n,r){for(var i,a=e([],n.length,t),o=a.length;o--;)n[i=a[o]]&&(n[i]=!(r[i]=n[i]))})})}function p(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function u(){}function c(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(e,t,n){var r=t.dir,i=n&&"parentNode"===r,a=F++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,a)}:function(t,n,o){var s,l,d,p=[_,a];if(o){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,o))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(d=t[q]||(t[q]={}),l=d[t.uniqueID]||(d[t.uniqueID]={}),(s=l[r])&&s[0]===_&&s[1]===a)return p[2]=s[2];if(l[r]=p,p[2]=e(t,n,o))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,a=n.length;i<a;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var a,o=[],s=0,l=e.length,d=null!=t;s<l;s++)(a=e[s])&&(n&&!n(a,r,i)||(o.push(a),d&&t.push(s)));return o}function v(e,t,n,i,a,o){return i&&!i[q]&&(i=v(i)),a&&!a[q]&&(a=v(a,o)),r(function(r,o,s,l){var d,p,u,c=[],f=[],h=o.length,v=r||m(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?v:g(v,c,e,s,l),w=n?a||(r?e:h||i)?[]:o:y;if(n&&n(y,w,s,l),i)for(d=g(w,f),i(d,[],s,l),p=d.length;p--;)(u=d[p])&&(w[f[p]]=!(y[f[p]]=u));if(r){if(a||e){if(a){for(d=[],p=w.length;p--;)(u=w[p])&&d.push(y[p]=u);a(null,w=[],d,l)}for(p=w.length;p--;)(u=w[p])&&(d=a?ee(r,u):c[p])>-1&&(r[d]=!(o[d]=u))}}else w=g(w===o?w.splice(h,w.length):w),a?a(null,o,w,l):J.apply(o,w)})}function y(e){for(var t,n,r,i=e.length,a=T.relative[e[0].type],o=a||T.relative[" "],s=a?1:0,l=f(function(e){return e===t},o,!0),d=f(function(e){return ee(t,e)>-1},o,!0),p=[function(e,n,r){var i=!a&&(r||n!==N)||((t=n).nodeType?l(e,n,r):d(e,n,r));return t=null,i}];s<i;s++)if(n=T.relative[e[s].type])p=[f(h(p),n)];else{if(n=T.filter[e[s].type].apply(null,e[s].matches),n[q]){for(r=++s;r<i&&!T.relative[e[r].type];r++);return v(s>1&&h(p),s>1&&c(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,s<r&&y(e.slice(s,r)),r<i&&y(e=e.slice(r)),r<i&&c(e))}p.push(n)}return h(p)}function w(e,n){var i=n.length>0,a=e.length>0,o=function(r,o,s,l,d){var p,u,c,f=0,h="0",m=r&&[],v=[],y=N,w=r||a&&T.find.TAG("*",d),b=_+=null==y?1:Math.random()||.1,x=w.length;for(d&&(N=o===P||o||d);h!==x&&null!=(p=w[h]);h++){if(a&&p){for(u=0,o||p.ownerDocument===P||(D(p),s=!H);c=e[u++];)if(c(p,o||P,s)){l.push(p);break}d&&(_=b)}i&&((p=!c&&p)&&f--,r&&m.push(p))}if(f+=h,i&&h!==f){for(u=0;c=n[u++];)c(m,v,o,s);if(r){if(f>0)for(;h--;)m[h]||v[h]||(v[h]=K.call(l));v=g(v)}J.apply(l,v),d&&!r&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return d&&(_=b,N=y),m};return i?r(o):o}var b,x,T,C,S,E,k,M,N,z,L,D,P,A,H,I,B,O,j,q="sizzle"+1*new Date,R=e.document,_=0,F=0,W=n(),G=n(),X=n(),$=function(e,t){return e===t&&(L=!0),0},V=1<<31,Y={}.hasOwnProperty,U=[],K=U.pop,Q=U.push,J=U.push,Z=U.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",ae=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",oe=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),de=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),pe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),ue=new RegExp(ae),ce=new RegExp("^"+re+"$"),fe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,we=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Te=function(){D()};try{J.apply(U=Z.call(R.childNodes),R.childNodes),U[R.childNodes.length].nodeType}catch(e){J={apply:U.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:R;return r!==P&&9===r.nodeType&&r.documentElement?(P=r,A=P.documentElement,H=!S(P),(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=ge.test(P.getElementsByClassName),x.getById=i(function(e){return A.appendChild(e).id=q,!P.getElementsByName||!P.getElementsByName(q).length}),x.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&H){var n=t.getElementById(e);return n?[n]:[]}},T.filter.ID=function(e){var t=e.replace(be,xe);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(be,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[i++];)1===n.nodeType&&r.push(n);return r}return a},T.find.CLASS=x.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&H)return t.getElementsByClassName(e)},B=[],I=[],(x.qsa=ge.test(P.querySelectorAll))&&(i(function(e){A.appendChild(e).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+q+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+q+"+*").length||I.push(".#.+[+~]")}),i(function(e){var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(x.matchesSelector=ge.test(O=A.matches||A.webkitMatchesSelector||A.mozMatchesSelector||A.oMatchesSelector||A.msMatchesSelector))&&i(function(e){x.disconnectedMatch=O.call(e,"div"),O.call(e,"[s!='']:x"),B.push("!=",ae)}),I=I.length&&new RegExp(I.join("|")),B=B.length&&new RegExp(B.join("|")),t=ge.test(A.compareDocumentPosition),j=t||ge.test(A.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},$=t?function(e,t){if(e===t)return L=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===R&&j(R,e)?-1:t===P||t.ownerDocument===R&&j(R,t)?1:z?ee(z,e)-ee(z,t):0:4&n?-1:1)}:function(e,t){if(e===t)return L=!0,0;var n,r=0,i=e.parentNode,a=t.parentNode,s=[e],l=[t];if(!i||!a)return e===P?-1:t===P?1:i?-1:a?1:z?ee(z,e)-ee(z,t):0;if(i===a)return o(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?o(s[r],l[r]):s[r]===R?-1:l[r]===R?1:0},P):P},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==P&&D(e),n=n.replace(pe,"='$1']"),x.matchesSelector&&H&&!X[n+" "]&&(!B||!B.test(n))&&(!I||!I.test(n)))try{var r=O.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&D(e),j(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&D(e);var n=T.attrHandle[t.toLowerCase()],r=n&&Y.call(T.attrHandle,t.toLowerCase())?n(e,t,!H):void 0;return void 0!==r?r:x.attributes||!H?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(L=!x.detectDuplicates,z=!x.sortStable&&e.slice(0),e.sort($),L){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return z=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(be,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var a=t.attr(i,e);return null==a?"!="===n:!n||(a+="","="===n?a===r:"!="===n?a!==r:"^="===n?r&&0===a.indexOf(r):"*="===n?r&&a.indexOf(r)>-1:"$="===n?r&&a.slice(-r.length)===r:"~="===n?(" "+a.replace(oe," ")+" ").indexOf(r)>-1:"|="===n&&(a===r||a.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var d,p,u,c,f,h,m=a!==o?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,w=!1;
if(g){if(a){for(;m;){for(c=t;c=c[m];)if(s?c.nodeName.toLowerCase()===v:1===c.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?g.firstChild:g.lastChild],o&&y){for(c=g,u=c[q]||(c[q]={}),p=u[c.uniqueID]||(u[c.uniqueID]={}),d=p[e]||[],f=d[0]===_&&d[1],w=f&&d[2],c=f&&g.childNodes[f];c=++f&&c&&c[m]||(w=f=0)||h.pop();)if(1===c.nodeType&&++w&&c===t){p[e]=[_,f,w];break}}else if(y&&(c=t,u=c[q]||(c[q]={}),p=u[c.uniqueID]||(u[c.uniqueID]={}),d=p[e]||[],f=d[0]===_&&d[1],w=f),w===!1)for(;(c=++f&&c&&c[m]||(w=f=0)||h.pop())&&((s?c.nodeName.toLowerCase()!==v:1!==c.nodeType)||!++w||(y&&(u=c[q]||(c[q]={}),p=u[c.uniqueID]||(u[c.uniqueID]={}),p[e]=[_,w]),c!==t)););return w-=i,w===r||w%r===0&&w/r>=0}}},PSEUDO:function(e,n){var i,a=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return a[q]?a(n):a.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=a(e,n),o=i.length;o--;)r=ee(e,i[o]),e[r]=!(t[r]=i[o])}):function(e){return a(e,0,i)}):a}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(se,"$1"));return i[q]?r(function(e,t,n,r){for(var a,o=i(e,null,r,[]),s=e.length;s--;)(a=o[s])&&(e[s]=!(t[s]=a))}):function(e,r,a){return t[0]=e,i(t,null,a,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,xe),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,xe).toLowerCase(),function(t){var n;do if(n=H?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===A},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:d(function(){return[0]}),last:d(function(e,t){return[t-1]}),eq:d(function(e,t,n){return[n<0?n+t:n]}),even:d(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:d(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:d(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:d(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=l(b);return u.prototype=T.filters=T.pseudos,T.setFilters=new u,E=t.tokenize=function(e,n){var r,i,a,o,s,l,d,p=G[e+" "];if(p)return n?0:p.slice(0);for(s=e,l=[],d=T.preFilter;s;){r&&!(i=le.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(a=[])),r=!1,(i=de.exec(s))&&(r=i.shift(),a.push({value:r,type:i[0].replace(se," ")}),s=s.slice(r.length));for(o in T.filter)!(i=fe[o].exec(s))||d[o]&&!(i=d[o](i))||(r=i.shift(),a.push({value:r,type:o,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):G(e,l).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],a=X[e+" "];if(!a){for(t||(t=E(e)),n=t.length;n--;)a=y(t[n]),a[q]?r.push(a):i.push(a);a=X(e,w(i,r)),a.selector=e}return a},M=t.select=function(e,t,n,r){var i,a,o,s,l,d="function"==typeof e&&e,u=!r&&E(e=d.selector||e);if(n=n||[],1===u.length){if(a=u[0]=u[0].slice(0),a.length>2&&"ID"===(o=a[0]).type&&x.getById&&9===t.nodeType&&H&&T.relative[a[1].type]){if(t=(T.find.ID(o.matches[0].replace(be,xe),t)||[])[0],!t)return n;d&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(i=fe.needsContext.test(e)?0:a.length;i--&&(o=a[i],!T.relative[s=o.type]);)if((l=T.find[s])&&(r=l(o.matches[0].replace(be,xe),ye.test(a[0].type)&&p(t.parentNode)||t))){if(a.splice(i,1),e=r.length&&c(a),!e)return J.apply(n,r),n;break}}return(d||k(e,u))(r,t,!H,n,!t||ye.test(e)&&p(t.parentNode)||t),n},x.sortStable=q.split("").sort($).join("")===q,x.detectDuplicates=!!L,D(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(P.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||a("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||a("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||a(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);fe.find=ye,fe.expr=ye.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=ye.uniqueSort,fe.text=ye.getText,fe.isXMLDoc=ye.isXML,fe.contains=ye.contains;var we=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&fe(e).is(n))break;r.push(e)}return r},be=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},xe=fe.expr.match.needsContext,Te=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Ce=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?fe.find.matchesSelector(r,e)?[r]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<i;t++)if(fe.contains(r[t],this))return!0}));for(t=0;t<i;t++)fe.find(e,r[t],n);return n=this.pushStack(i>1?fe.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&xe.test(e)?fe(e):e||[],!1).length}});var Se,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ke=fe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Se,"string"==typeof e){if(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:Ee.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:re,!0)),Te.test(r[1])&&fe.isPlainObject(t))for(r in t)fe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}if(i=re.getElementById(r[2]),i&&i.parentNode){if(i.id!==r[2])return Se.find(e);this.length=1,this[0]=i}return this.context=re,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):fe.isFunction(e)?"undefined"!=typeof n.ready?n.ready(e):e(fe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),fe.makeArray(e,this))};ke.prototype=fe.fn,Se=fe(re);var Me=/^(?:parents|prev(?:Until|All))/,Ne={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t,n=fe(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(fe.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,a=[],o=xe.test(e)||"string"!=typeof e?fe(e,t||this.context):0;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?fe.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?fe.inArray(this[0],fe(e)):fe.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return we(e,"parentNode")},parentsUntil:function(e,t,n){return we(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return we(e,"nextSibling")},prevAll:function(e){return we(e,"previousSibling")},nextUntil:function(e,t,n){return we(e,"nextSibling",n)},prevUntil:function(e,t,n){return we(e,"previousSibling",n)},siblings:function(e){return be((e.parentNode||{}).firstChild,e)},children:function(e){return be(e.firstChild)},contents:function(e){return fe.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:fe.merge([],e.childNodes)}},function(e,t){fe.fn[e]=function(n,r){var i=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=fe.filter(r,i)),this.length>1&&(Ne[e]||(i=fe.uniqueSort(i)),Me.test(e)&&(i=i.reverse())),this.pushStack(i)}});var ze=/\S+/g;fe.Callbacks=function(e){e="string"==typeof e?a(e):fe.extend({},e);var t,n,r,i,o=[],s=[],l=-1,d=function(){for(i=e.once,r=t=!0;s.length;l=-1)for(n=s.shift();++l<o.length;)o[l].apply(n[0],n[1])===!1&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},p={add:function(){return o&&(n&&!t&&(l=o.length-1,s.push(n)),function t(n){fe.each(n,function(n,r){fe.isFunction(r)?e.unique&&p.has(r)||o.push(r):r&&r.length&&"string"!==fe.type(r)&&t(r)})}(arguments),n&&!t&&d()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=!0,n||p.disable(),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||d()),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!r}};return p},fe.extend({Deferred:function(e){var t=[["resolve","done",fe.Callbacks("once memory"),"resolved"],["reject","fail",fe.Callbacks("once memory"),"rejected"],["notify","progress",fe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return fe.Deferred(function(n){fe.each(t,function(t,a){var o=fe.isFunction(e[t])&&e[t];i[a[1]](function(){var e=o&&o.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[a[0]+"With"](this===r?n.promise():this,o?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?fe.extend(e,r):r}},i={};return r.pipe=r.then,fe.each(t,function(e,a){var o=a[2],s=a[3];r[a[1]]=o.add,s&&o.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[a[0]]=function(){return i[a[0]+"With"](this===i?r:this,arguments),this},i[a[0]+"With"]=o.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,a=ie.call(arguments),o=a.length,s=1!==o||e&&fe.isFunction(e.promise)?o:0,l=1===s?e:fe.Deferred(),d=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?ie.call(arguments):i,r===t?l.notifyWith(n,r):--s||l.resolveWith(n,r)}};if(o>1)for(t=new Array(o),n=new Array(o),r=new Array(o);i<o;i++)a[i]&&fe.isFunction(a[i].promise)?a[i].promise().progress(d(i,n,t)).done(d(i,r,a)).fail(l.reject):--s;return s||l.resolveWith(r,a),l.promise()}});var Le;fe.fn.ready=function(e){return fe.ready.promise().done(e),this},fe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?fe.readyWait++:fe.ready(!0)},ready:function(e){(e===!0?--fe.readyWait:fe.isReady)||(fe.isReady=!0,e!==!0&&--fe.readyWait>0||(Le.resolveWith(re,[fe]),fe.fn.triggerHandler&&(fe(re).triggerHandler("ready"),fe(re).off("ready"))))}}),fe.ready.promise=function(t){if(!Le)if(Le=fe.Deferred(),"complete"===re.readyState||"loading"!==re.readyState&&!re.documentElement.doScroll)e.setTimeout(fe.ready);else if(re.addEventListener)re.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s);else{re.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&re.documentElement}catch(e){}n&&n.doScroll&&!function t(){if(!fe.isReady){try{n.doScroll("left")}catch(n){return e.setTimeout(t,50)}o(),fe.ready()}}()}return Le.promise(t)},fe.ready.promise();var De;for(De in fe(ue))break;ue.ownFirst="0"===De,ue.inlineBlockNeedsLayout=!1,fe(function(){var e,t,n,r;n=re.getElementsByTagName("body")[0],n&&n.style&&(t=re.createElement("div"),r=re.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ue.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=re.createElement("div");ue.deleteExpando=!0;try{delete e.test}catch(e){ue.deleteExpando=!1}e=null}();var Pe=function(e){var t=fe.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||t!==!0&&e.getAttribute("classid")===t)},Ae=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/([A-Z])/g;fe.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?fe.cache[e[fe.expando]]:e[fe.expando],!!e&&!d(e)},data:function(e,t,n){return p(e,t,n)},removeData:function(e,t){return u(e,t)},_data:function(e,t,n){return p(e,t,n,!0)},_removeData:function(e,t){return u(e,t,!0)}}),fe.fn.extend({data:function(e,t){var n,r,i,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(i=fe.data(a),1===a.nodeType&&!fe._data(a,"parsedAttrs"))){for(n=o.length;n--;)o[n]&&(r=o[n].name,0===r.indexOf("data-")&&(r=fe.camelCase(r.slice(5)),l(a,r,i[r])));fe._data(a,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){fe.data(this,e)}):arguments.length>1?this.each(function(){fe.data(this,e,t)}):a?l(a,e,fe.data(a,e)):void 0},removeData:function(e){return this.each(function(){fe.removeData(this,e)})}}),fe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=fe._data(e,t),n&&(!r||fe.isArray(n)?r=fe._data(e,t,fe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),r=n.length,i=n.shift(),a=fe._queueHooks(e,t),o=function(){fe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete a.stop,i.call(e,o,a)),!r&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return fe._data(e,n)||fe._data(e,n,{empty:fe.Callbacks("once memory").add(function(){fe._removeData(e,t+"queue"),fe._removeData(e,n)})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=fe.Deferred(),a=this,o=this.length,s=function(){--r||i.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)n=fe._data(a[o],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}}),function(){var e;ue.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=re.getElementsByTagName("body")[0],n&&n.style?(t=re.createElement("div"),r=re.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(re.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var Ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Be=new RegExp("^(?:([+-])=|)("+Ie+")([a-z%]*)$","i"),Oe=["Top","Right","Bottom","Left"],je=function(e,t){return e=t||e,"none"===fe.css(e,"display")||!fe.contains(e.ownerDocument,e)},qe=function(e,t,n,r,i,a,o){var s=0,l=e.length,d=null==n;if("object"===fe.type(n)){i=!0;for(s in n)qe(e,t,s,n[s],!0,a,o)}else if(void 0!==r&&(i=!0,fe.isFunction(r)||(o=!0),d&&(o?(t.call(e,r),t=null):(d=t,t=function(e,t,n){return d.call(fe(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return i?e:d?t.call(e):l?t(e[0],n):a},Re=/^(?:checkbox|radio)$/i,_e=/<([\w:-]+)/,Fe=/^$|\/(?:java|ecma)script/i,We=/^\s+/,Ge="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var e=re.createElement("div"),t=re.createDocumentFragment(),n=re.createElement("input");e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ue.leadingWhitespace=3===e.firstChild.nodeType,ue.tbody=!e.getElementsByTagName("tbody").length,ue.htmlSerialize=!!e.getElementsByTagName("link").length,ue.html5Clone="<:nav></:nav>"!==re.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,t.appendChild(n),ue.appendChecked=n.checked,e.innerHTML="<textarea>x</textarea>",ue.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,t.appendChild(e),n=re.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),ue.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.noCloneEvent=!!e.addEventListener,e[fe.expando]=1,ue.attributes=!e.getAttribute(fe.expando)}();var Xe={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ue.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var $e=/<|&#?\w+;/,Ve=/<tbody/i;!function(){var t,n,r=re.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(ue[t]=n in e)||(r.setAttribute(n,"t"),ue[t]=r.attributes[n].expando===!1);r=null}();var Ye=/^(?:input|select|textarea)$/i,Ue=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^(?:focusinfocus|focusoutblur)$/,Je=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,r,i){var a,o,s,l,d,p,u,c,f,h,m,g=fe._data(e);if(g){for(n.handler&&(l=n,n=l.handler,i=l.selector),n.guid||(n.guid=fe.guid++),(o=g.events)||(o=g.events={}),(p=g.handle)||(p=g.handle=function(e){return"undefined"==typeof fe||e&&fe.event.triggered===e.type?void 0:fe.event.dispatch.apply(p.elem,arguments)},p.elem=e),t=(t||"").match(ze)||[""],s=t.length;s--;)a=Je.exec(t[s])||[],f=m=a[1],h=(a[2]||"").split(".").sort(),f&&(d=fe.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=fe.event.special[f]||{},u=fe.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&fe.expr.match.needsContext.test(i),namespace:h.join(".")},l),(c=o[f])||(c=o[f]=[],c.delegateCount=0,d.setup&&d.setup.call(e,r,h,p)!==!1||(e.addEventListener?e.addEventListener(f,p,!1):e.attachEvent&&e.attachEvent("on"+f,p))),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?c.splice(c.delegateCount++,0,u):c.push(u),fe.event.global[f]=!0);e=null}},remove:function(e,t,n,r,i){var a,o,s,l,d,p,u,c,f,h,m,g=fe.hasData(e)&&fe._data(e);if(g&&(p=g.events)){for(t=(t||"").match(ze)||[""],d=t.length;d--;)if(s=Je.exec(t[d])||[],f=m=s[1],h=(s[2]||"").split(".").sort(),f){for(u=fe.event.special[f]||{},f=(r?u.delegateType:u.bindType)||f,c=p[f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=a=c.length;a--;)o=c[a],!i&&m!==o.origType||n&&n.guid!==o.guid||s&&!s.test(o.namespace)||r&&r!==o.selector&&("**"!==r||!o.selector)||(c.splice(a,1),o.selector&&c.delegateCount--,u.remove&&u.remove.call(e,o));l&&!c.length&&(u.teardown&&u.teardown.call(e,h,g.handle)!==!1||fe.removeEvent(e,f,g.handle),delete p[f])}else for(f in p)fe.event.remove(e,f+t[d],n,r,!0);fe.isEmptyObject(p)&&(delete g.handle,fe._removeData(e,"events"))}},trigger:function(t,n,r,i){var a,o,s,l,d,p,u,c=[r||re],f=pe.call(t,"type")?t.type:t,h=pe.call(t,"namespace")?t.namespace.split("."):[];if(s=p=r=r||re,3!==r.nodeType&&8!==r.nodeType&&!Qe.test(f+fe.event.triggered)&&(f.indexOf(".")>-1&&(h=f.split("."),f=h.shift(),h.sort()),o=f.indexOf(":")<0&&"on"+f,t=t[fe.expando]?t:new fe.Event(f,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[f]||{},i||!d.trigger||d.trigger.apply(r,n)!==!1)){if(!i&&!d.noBubble&&!fe.isWindow(r)){for(l=d.delegateType||f,Qe.test(l+f)||(s=s.parentNode);s;s=s.parentNode)c.push(s),p=s;p===(r.ownerDocument||re)&&c.push(p.defaultView||p.parentWindow||e)}for(u=0;(s=c[u++])&&!t.isPropagationStopped();)t.type=u>1?l:d.bindType||f,a=(fe._data(s,"events")||{})[t.type]&&fe._data(s,"handle"),a&&a.apply(s,n),a=o&&s[o],a&&a.apply&&Pe(s)&&(t.result=a.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=f,!i&&!t.isDefaultPrevented()&&(!d._default||d._default.apply(c.pop(),n)===!1)&&Pe(r)&&o&&r[f]&&!fe.isWindow(r)){p=r[o],p&&(r[o]=null),fe.event.triggered=f;try{r[f]()}catch(e){}fe.event.triggered=void 0,p&&(r[o]=p)}return t.result}},dispatch:function(e){e=fe.event.fix(e);var t,n,r,i,a,o=[],s=ie.call(arguments),l=(fe._data(this,"events")||{})[e.type]||[],d=fe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!d.preDispatch||d.preDispatch.call(this,e)!==!1){for(o=fe.event.handlers.call(this,e,l),t=0;(i=o[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(a=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(a.namespace)||(e.handleObj=a,e.data=a.data,r=((fe.event.special[a.origType]||{}).handle||a.handler).apply(i.elem,s),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,a,o=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(r=[],n=0;n<s;n++)a=t[n],i=a.selector+" ",void 0===r[i]&&(r[i]=a.needsContext?fe(i,this).index(l)>-1:fe.find(i,this,null,[l]).length),r[i]&&r.push(a);r.length&&o.push({elem:l,handlers:r})}return s<t.length&&o.push({elem:this,handlers:t.slice(s)}),o},fix:function(e){if(e[fe.expando])return e;var t,n,r,i=e.type,a=e,o=this.fixHooks[i];for(o||(this.fixHooks[i]=o=Ke.test(i)?this.mouseHooks:Ue.test(i)?this.keyHooks:{}),r=o.props?this.props.concat(o.props):this.props,e=new fe.Event(a),t=r.length;t--;)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||re),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,o.filter?o.filter(e,a):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,a=t.button,o=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||re,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&o&&(e.relatedTarget=o===e.target?t.toElement:o),e.which||void 0===a||(e.which=1&a?1:2&a?3:4&a?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(fe.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return fe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var r=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}},fe.removeEvent=re.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var r="on"+t;e.detachEvent&&("undefined"==typeof e[r]&&(e[r]=null),e.detachEvent(r,n))},fe.Event=function(e,t){return this instanceof fe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?y:w):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),void(this[fe.expando]=!0)):new fe.Event(e,t)},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=y,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=y,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=y,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,a=e.handleObj;return i&&(i===r||fe.contains(r,i))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}}),ue.submit||(fe.event.special.submit={setup:function(){return!fe.nodeName(this,"form")&&void fe.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=fe.nodeName(t,"input")||fe.nodeName(t,"button")?fe.prop(t,"form"):void 0;n&&!fe._data(n,"submit")&&(fe.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),fe._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&fe.event.simulate("submit",this.parentNode,e))},teardown:function(){return!fe.nodeName(this,"form")&&void fe.event.remove(this,"._submit")}}),ue.change||(fe.event.special.change={setup:function(){return Ye.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(fe.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),fe.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),fe.event.simulate("change",this,e)})),!1):void fe.event.add(this,"beforeactivate._change",function(e){var t=e.target;Ye.test(t.nodeName)&&!fe._data(t,"change")&&(fe.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||fe.event.simulate("change",this.parentNode,e)}),fe._data(t,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return fe.event.remove(this,"._change"),!Ye.test(this.nodeName)}}),ue.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=fe._data(r,t);i||r.addEventListener(e,n,!0),fe._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=fe._data(r,t)-1;i?fe._data(r,t,i):(r.removeEventListener(e,n,!0),fe._removeData(r,t))}}}),fe.fn.extend({on:function(e,t,n,r){return x(this,e,t,n,r)},one:function(e,t,n,r){return x(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,fe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=w),this.each(function(){fe.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}});var Ze=/ jQuery\d+="(?:null|\d+)"/g,et=new RegExp("<(?:"+Ge+")[\\s/>]","i"),tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,nt=/<script|<style|<link/i,rt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,at=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ot=f(re),st=ot.appendChild(re.createElement("div"));fe.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,n){var r,i,a,o,s,l=fe.contains(e.ownerDocument,e);if(ue.html5Clone||fe.isXMLDoc(e)||!et.test("<"+e.nodeName+">")?a=e.cloneNode(!0):(st.innerHTML=e.outerHTML,st.removeChild(a=st.firstChild)),!(ue.noCloneEvent&&ue.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(r=h(a),s=h(e),o=0;null!=(i=s[o]);++o)r[o]&&k(i,r[o]);if(t)if(n)for(s=s||h(e),r=r||h(a),o=0;null!=(i=s[o]);o++)E(i,r[o]);else E(e,a);return r=h(a,"script"),r.length>0&&m(r,!l&&h(e,"script")),r=s=i=null,a},cleanData:function(e,t){for(var n,r,i,a,o=0,s=fe.expando,l=fe.cache,d=ue.attributes,p=fe.event.special;null!=(n=e[o]);o++)if((t||Pe(n))&&(i=n[s],a=i&&l[i])){if(a.events)for(r in a.events)p[r]?fe.event.remove(n,r):fe.removeEvent(n,r,a.handle);l[i]&&(delete l[i],d||"undefined"==typeof n.removeAttribute?n[s]=void 0:n.removeAttribute(s),ne.push(i))}}}),fe.fn.extend({domManip:M,detach:function(e){return N(this,e,!0)},remove:function(e){return N(this,e)},text:function(e){return qe(this,function(e){return void 0===e?fe.text(this):this.empty().append((this[0]&&this[0].ownerDocument||re).createTextNode(e))},null,e,arguments.length)},append:function(){return M(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.appendChild(e)}})},prepend:function(){return M(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return M(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return M(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&fe.cleanData(h(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&fe.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return qe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Ze,""):void 0;if("string"==typeof e&&!nt.test(e)&&(ue.htmlSerialize||!et.test(e))&&(ue.leadingWhitespace||!We.test(e))&&!Xe[(_e.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},
1===t.nodeType&&(fe.cleanData(h(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return M(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(h(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,r=0,i=[],a=fe(e),o=a.length-1;r<=o;r++)n=r===o?this:this.clone(!0),fe(a[r])[t](n),oe.apply(i,n.get());return this.pushStack(i)}});var lt,dt={HTML:"block",BODY:"block"},pt=/^margin/,ut=new RegExp("^("+Ie+")(?!px)[a-z%]+$","i"),ct=function(e,t,n,r){var i,a,o={};for(a in t)o[a]=e.style[a],e.style[a]=t[a];i=n.apply(e,r||[]);for(a in t)e.style[a]=o[a];return i},ft=re.documentElement;!function(){function t(){var t,p,u=re.documentElement;u.appendChild(l),d.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=i=s=!1,r=o=!0,e.getComputedStyle&&(p=e.getComputedStyle(d),n="1%"!==(p||{}).top,s="2px"===(p||{}).marginLeft,i="4px"===(p||{width:"4px"}).width,d.style.marginRight="50%",r="4px"===(p||{marginRight:"4px"}).marginRight,t=d.appendChild(re.createElement("div")),t.style.cssText=d.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",d.style.width="1px",o=!parseFloat((e.getComputedStyle(t)||{}).marginRight),d.removeChild(t)),d.style.display="none",a=0===d.getClientRects().length,a&&(d.style.display="",d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",t=d.getElementsByTagName("td"),t[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===t[0].offsetHeight,a&&(t[0].style.display="",t[1].style.display="none",a=0===t[0].offsetHeight)),u.removeChild(l)}var n,r,i,a,o,s,l=re.createElement("div"),d=re.createElement("div");d.style&&(d.style.cssText="float:left;opacity:.5",ue.opacity="0.5"===d.style.opacity,ue.cssFloat=!!d.style.cssFloat,d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",ue.clearCloneStyle="content-box"===d.style.backgroundClip,l=re.createElement("div"),l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",d.innerHTML="",l.appendChild(d),ue.boxSizing=""===d.style.boxSizing||""===d.style.MozBoxSizing||""===d.style.WebkitBoxSizing,fe.extend(ue,{reliableHiddenOffsets:function(){return null==n&&t(),a},boxSizingReliable:function(){return null==n&&t(),i},pixelMarginRight:function(){return null==n&&t(),r},pixelPosition:function(){return null==n&&t(),n},reliableMarginRight:function(){return null==n&&t(),o},reliableMarginLeft:function(){return null==n&&t(),s}}))}();var ht,mt,gt=/^(top|right|bottom|left)$/;e.getComputedStyle?(ht=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},mt=function(e,t,n){var r,i,a,o,s=e.style;return n=n||ht(e),o=n?n.getPropertyValue(t)||n[t]:void 0,""!==o&&void 0!==o||fe.contains(e.ownerDocument,e)||(o=fe.style(e,t)),n&&!ue.pixelMarginRight()&&ut.test(o)&&pt.test(t)&&(r=s.width,i=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=i,s.maxWidth=a),void 0===o?o:o+""}):ft.currentStyle&&(ht=function(e){return e.currentStyle},mt=function(e,t,n){var r,i,a,o,s=e.style;return n=n||ht(e),o=n?n[t]:void 0,null==o&&s&&s[t]&&(o=s[t]),ut.test(o)&&!gt.test(t)&&(r=s.left,i=e.runtimeStyle,a=i&&i.left,a&&(i.left=e.currentStyle.left),s.left="fontSize"===t?"1em":o,o=s.pixelLeft+"px",s.left=r,a&&(i.left=a)),void 0===o?o:o+""||"auto"});var vt=/alpha\([^)]*\)/i,yt=/opacity\s*=\s*([^)]*)/i,wt=/^(none|table(?!-c[ea]).+)/,bt=new RegExp("^("+Ie+")(.*)$","i"),xt={position:"absolute",visibility:"hidden",display:"block"},Tt={letterSpacing:"0",fontWeight:"400"},Ct=["Webkit","O","Moz","ms"],St=re.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=mt(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:ue.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,a,o,s=fe.camelCase(t),l=e.style;if(t=fe.cssProps[s]||(fe.cssProps[s]=P(s)||s),o=fe.cssHooks[t]||fe.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(i=o.get(e,!1,r))?i:l[t];if(a=typeof n,"string"===a&&(i=Be.exec(n))&&i[1]&&(n=c(e,t,i),a="number"),null!=n&&n===n&&("number"===a&&(n+=i&&i[3]||(fe.cssNumber[s]?"":"px")),ue.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(o&&"set"in o&&void 0===(n=o.set(e,n,r)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,r){var i,a,o,s=fe.camelCase(t);return t=fe.cssProps[s]||(fe.cssProps[s]=P(s)||s),o=fe.cssHooks[t]||fe.cssHooks[s],o&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=mt(e,t,r)),"normal"===a&&t in Tt&&(a=Tt[t]),""===n||n?(i=parseFloat(a),n===!0||isFinite(i)?i||0:a):a}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,r){if(n)return wt.test(fe.css(e,"display"))&&0===e.offsetWidth?ct(e,xt,function(){return B(e,t,r)}):B(e,t,r)},set:function(e,n,r){var i=r&&ht(e);return H(e,n,r?I(e,t,r,ue.boxSizing&&"border-box"===fe.css(e,"boxSizing",!1,i),i):0)}}}),ue.opacity||(fe.cssHooks.opacity={get:function(e,t){return yt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=fe.isNumeric(t)?"alpha(opacity="+100*t+")":"",a=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===fe.trim(a.replace(vt,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=vt.test(a)?a.replace(vt,i):a+" "+i)}}),fe.cssHooks.marginRight=D(ue.reliableMarginRight,function(e,t){if(t)return ct(e,{display:"inline-block"},mt,[e,"marginRight"])}),fe.cssHooks.marginLeft=D(ue.reliableMarginLeft,function(e,t){if(t)return(parseFloat(mt(e,"marginLeft"))||(fe.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-ct(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},a="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Oe[r]+t]=a[r]||a[r-2]||a[0];return i}},pt.test(e)||(fe.cssHooks[e+t].set=H)}),fe.fn.extend({css:function(e,t){return qe(this,function(e,t,n){var r,i,a={},o=0;if(fe.isArray(t)){for(r=ht(e),i=t.length;o<i;o++)a[t[o]]=fe.css(e,t[o],!1,r);return a}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)},show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){je(this)?fe(this).show():fe(this).hide()})}}),fe.Tween=O,O.prototype={constructor:O,init:function(e,t,n,r,i,a){this.elem=e,this.prop=n,this.easing=i||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=a||(fe.cssNumber[n]?"":"px")},cur:function(){var e=O.propHooks[this.prop];return e&&e.get?e.get(this):O.propHooks._default.get(this)},run:function(e){var t,n=O.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):O.propHooks._default.set(this),this}},O.prototype.init.prototype=O.prototype,O.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},O.propHooks.scrollTop=O.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=O.prototype.init,fe.fx.step={};var Et,kt,Mt=/^(?:toggle|show|hide)$/,Nt=/queueHooks$/;fe.Animation=fe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return c(n.elem,e,Be.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(ze);for(var n,r=0,i=e.length;r<i;r++)n=e[r],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[_],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),fe.speed=function(e,t,n){var r=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return r.duration=fe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in fe.fx.speeds?fe.fx.speeds[r.duration]:fe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){fe.isFunction(r.old)&&r.old.call(this),r.queue&&fe.dequeue(this,r.queue)},r},fe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(je).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=fe.isEmptyObject(e),a=fe.speed(t,n,r),o=function(){var t=W(this,fe.extend({},e),a);(i||fe._data(this,"finish"))&&t.stop(!0)};return o.finish=o,i||a.queue===!1?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",a=fe.timers,o=fe._data(this);if(i)o[i]&&o[i].stop&&r(o[i]);else for(i in o)o[i]&&o[i].stop&&Nt.test(i)&&r(o[i]);for(i=a.length;i--;)a[i].elem!==this||null!=e&&a[i].queue!==e||(a[i].anim.stop(n),t=!1,a.splice(i,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=fe._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],a=fe.timers,o=r?r.length:0;for(n.finish=!0,fe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(q(t,!0),e,r,i)}}),fe.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),fe.timers=[],fe.fx.tick=function(){var e,t=fe.timers,n=0;for(Et=fe.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||fe.fx.stop(),Et=void 0},fe.fx.timer=function(e){fe.timers.push(e),e()?fe.fx.start():fe.timers.pop()},fe.fx.interval=13,fe.fx.start=function(){kt||(kt=e.setInterval(fe.fx.tick,fe.fx.interval))},fe.fx.stop=function(){e.clearInterval(kt),kt=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e,t=re.createElement("input"),n=re.createElement("div"),r=re.createElement("select"),i=r.appendChild(re.createElement("option"));n=re.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),e=n.getElementsByTagName("a")[0],e.style.cssText="top:1px",ue.getSetAttribute="t"!==n.className,ue.style=/top/.test(e.getAttribute("style")),ue.hrefNormalized="/a"===e.getAttribute("href"),ue.checkOn=!!t.value,ue.optSelected=i.selected,ue.enctype=!!re.createElement("form").enctype,r.disabled=!0,ue.optDisabled=!i.disabled,t=re.createElement("input"),t.setAttribute("value",""),ue.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),ue.radioValue="t"===t.value}();var zt=/\r/g,Lt=/[\x20\t\r\n\f]+/g;fe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=fe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,fe(this).val()):e,null==i?i="":"number"==typeof i?i+="":fe.isArray(i)&&(i=fe.map(i,function(e){return null==e?"":e+""})),t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=fe.valHooks[i.type]||fe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(zt,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:fe.trim(fe.text(e)).replace(Lt," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,a="select-one"===e.type||i<0,o=a?null:[],s=a?i+1:r.length,l=i<0?s:a?i:0;l<s;l++)if(n=r[l],(n.selected||l===i)&&(ue.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!fe.nodeName(n.parentNode,"optgroup"))){if(t=fe(n).val(),a)return t;o.push(t)}return o},set:function(e,t){for(var n,r,i=e.options,a=fe.makeArray(t),o=i.length;o--;)if(r=i[o],fe.inArray(fe.valHooks.option.get(r),a)>-1)try{r.selected=n=!0}catch(e){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(fe.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},ue.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Dt,Pt,At=fe.expr.attrHandle,Ht=/^(?:checked|selected)$/i,It=ue.getSetAttribute,Bt=ue.input;fe.fn.extend({attr:function(e,t){return qe(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return"undefined"==typeof e.getAttribute?fe.prop(e,t,n):(1===a&&fe.isXMLDoc(e)||(t=t.toLowerCase(),i=fe.attrHooks[t]||(fe.expr.match.bool.test(t)?Pt:Dt)),void 0!==n?null===n?void fe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=fe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!ue.radioValue&&"radio"===t&&fe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,a=t&&t.match(ze);if(a&&1===e.nodeType)for(;n=a[i++];)r=fe.propFix[n]||n,fe.expr.match.bool.test(n)?Bt&&It||!Ht.test(n)?e[r]=!1:e[fe.camelCase("default-"+n)]=e[r]=!1:fe.attr(e,n,""),e.removeAttribute(It?n:r)}}),Pt={set:function(e,t,n){return t===!1?fe.removeAttr(e,n):Bt&&It||!Ht.test(n)?e.setAttribute(!It&&fe.propFix[n]||n,n):e[fe.camelCase("default-"+n)]=e[n]=!0,n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=At[t]||fe.find.attr;Bt&&It||!Ht.test(t)?At[t]=function(e,t,r){var i,a;return r||(a=At[t],At[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,At[t]=a),i}:At[t]=function(e,t,n){if(!n)return e[fe.camelCase("default-"+t)]?t.toLowerCase():null}}),Bt&&It||(fe.attrHooks.value={set:function(e,t,n){return fe.nodeName(e,"input")?void(e.defaultValue=t):Dt&&Dt.set(e,t,n)}}),It||(Dt={set:function(e,t,n){var r=e.getAttributeNode(n);if(r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n))return t}},At.id=At.name=At.coords=function(e,t,n){var r;if(!n)return(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},fe.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:Dt.set},fe.attrHooks.contenteditable={set:function(e,t,n){Dt.set(e,""!==t&&t,n)}},fe.each(["width","height"],function(e,t){fe.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),ue.style||(fe.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Ot=/^(?:input|select|textarea|button|object)$/i,jt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return qe(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return e=fe.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),fe.extend({prop:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,i=fe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):Ot.test(e.nodeName)||jt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ue.hrefNormalized||fe.each(["href","src"],function(e,t){fe.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ue.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),ue.enctype||(fe.propFix.enctype="encoding");var qt=/[\t\r\n\f]/g;fe.fn.extend({addClass:function(e){var t,n,r,i,a,o,s,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,G(this)))});if("string"==typeof e&&e)for(t=e.match(ze)||[];n=this[l++];)if(i=G(n),r=1===n.nodeType&&(" "+i+" ").replace(qt," ")){for(o=0;a=t[o++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");s=fe.trim(r),i!==s&&fe.attr(n,"class",s)}return this},removeClass:function(e){var t,n,r,i,a,o,s,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ze)||[];n=this[l++];)if(i=G(n),r=1===n.nodeType&&(" "+i+" ").replace(qt," ")){for(o=0;a=t[o++];)for(;r.indexOf(" "+a+" ")>-1;)r=r.replace(" "+a+" "," ");s=fe.trim(r),i!==s&&fe.attr(n,"class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,G(this),t),t)}):this.each(function(){var t,r,i,a;if("string"===n)for(r=0,i=fe(this),a=e.match(ze)||[];t=a[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=G(this),t&&fe._data(this,"__className__",t),fe.attr(this,"class",t||e===!1?"":fe._data(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(n)+" ").replace(qt," ").indexOf(t)>-1)return!0;return!1}}),fe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var Rt=e.location,_t=fe.now(),Ft=/\?/,Wt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;fe.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=fe.trim(t+"");return i&&!fe.trim(i.replace(Wt,function(e,t,i,a){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!a-!i,"")}))?Function("return "+i)():fe.error("Invalid JSON: "+t)},fe.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new e.DOMParser,n=r.parseFromString(t,"text/xml")):(n=new e.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Gt=/#.*$/,Xt=/([?&])_=[^&]*/,$t=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Vt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Yt=/^(?:GET|HEAD)$/,Ut=/^\/\//,Kt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Qt={},Jt={},Zt="*/".concat("*"),en=Rt.href,tn=Kt.exec(en.toLowerCase())||[];fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:en,type:"GET",isLocal:Vt.test(tn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":fe.parseJSON,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?V(V(e,fe.ajaxSettings),t):V(fe.ajaxSettings,e)},ajaxPrefilter:X(Qt),ajaxTransport:X(Jt),ajax:function(t,n){function r(t,n,r,i){var a,u,y,w,x,C=n;2!==b&&(b=2,l&&e.clearTimeout(l),p=void 0,s=i||"",T.readyState=t>0?4:0,a=t>=200&&t<300||304===t,r&&(w=Y(c,T,r)),w=U(c,w,T,a),a?(c.ifModified&&(x=T.getResponseHeader("Last-Modified"),x&&(fe.lastModified[o]=x),x=T.getResponseHeader("etag"),x&&(fe.etag[o]=x)),204===t||"HEAD"===c.type?C="nocontent":304===t?C="notmodified":(C=w.state,u=w.data,y=w.error,a=!y)):(y=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",a?m.resolveWith(f,[u,C,T]):m.rejectWith(f,[T,C,y]),T.statusCode(v),v=void 0,d&&h.trigger(a?"ajaxSuccess":"ajaxError",[T,c,a?u:y]),g.fireWith(f,[T,C]),d&&(h.trigger("ajaxComplete",[T,c]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,a,o,s,l,d,p,u,c=fe.ajaxSetup({},n),f=c.context||c,h=c.context&&(f.nodeType||f.jquery)?fe(f):fe.event,m=fe.Deferred(),g=fe.Callbacks("once memory"),v=c.statusCode||{},y={},w={},b=0,x="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!u)for(u={};t=$t.exec(s);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=w[n]=w[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(b<2)for(t in e)v[t]=[v[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||x;return p&&p.abort(t),r(0,t),this}};if(m.promise(T).complete=g.add,T.success=T.done,T.error=T.fail,c.url=((t||c.url||en)+"").replace(Gt,"").replace(Ut,tn[1]+"//"),c.type=n.method||n.type||c.method||c.type,c.dataTypes=fe.trim(c.dataType||"*").toLowerCase().match(ze)||[""],null==c.crossDomain&&(i=Kt.exec(c.url.toLowerCase()),c.crossDomain=!(!i||i[1]===tn[1]&&i[2]===tn[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(tn[3]||("http:"===tn[1]?"80":"443")))),c.data&&c.processData&&"string"!=typeof c.data&&(c.data=fe.param(c.data,c.traditional)),$(Qt,c,n,T),2===b)return T;d=fe.event&&c.global,d&&0===fe.active++&&fe.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!Yt.test(c.type),o=c.url,c.hasContent||(c.data&&(o=c.url+=(Ft.test(o)?"&":"?")+c.data,delete c.data),c.cache===!1&&(c.url=Xt.test(o)?o.replace(Xt,"$1_="+_t++):o+(Ft.test(o)?"&":"?")+"_="+_t++)),c.ifModified&&(fe.lastModified[o]&&T.setRequestHeader("If-Modified-Since",fe.lastModified[o]),fe.etag[o]&&T.setRequestHeader("If-None-Match",fe.etag[o])),(c.data&&c.hasContent&&c.contentType!==!1||n.contentType)&&T.setRequestHeader("Content-Type",c.contentType),T.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+Zt+"; q=0.01":""):c.accepts["*"]);for(a in c.headers)T.setRequestHeader(a,c.headers[a]);if(c.beforeSend&&(c.beforeSend.call(f,T,c)===!1||2===b))return T.abort();x="abort";for(a in{success:1,error:1,complete:1})T[a](c[a]);if(p=$(Jt,c,n,T)){if(T.readyState=1,d&&h.trigger("ajaxSend",[T,c]),2===b)return T;c.async&&c.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},c.timeout));try{b=1,p.send(y,r)}catch(e){if(!(b<2))throw e;r(-1,e)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,r,i){return fe.isFunction(n)&&(i=i||r,r=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:i,data:n,success:r},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){if(fe.isFunction(e))return this.each(function(t){fe(this).wrapAll(e.call(this,t))});if(this[0]){var t=fe(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){fe.nodeName(this,"body")||fe(this).replaceWith(this.childNodes)}).end()}}),fe.expr.filters.hidden=function(e){return ue.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:Q(e)},fe.expr.filters.visible=function(e){return!fe.expr.filters.hidden(e)};var nn=/%20/g,rn=/\[\]$/,an=/\r?\n/g,on=/^(?:submit|button|image|reset|file)$/i,sn=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,r=[],i=function(e,t){t=fe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=fe.ajaxSettings&&fe.ajaxSettings.traditional),fe.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){i(this.name,this.value)});else for(n in e)J(n,e[n],t,i);return r.join("&").replace(nn,"+")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&sn.test(this.nodeName)&&!on.test(e)&&(this.checked||!Re.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:fe.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(an,"\r\n")}}):{name:t.name,value:n.replace(an,"\r\n")}}).get()}}),fe.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?ee():re.documentMode>8?Z():/^(get|post|head|put|delete|options)$/i.test(this.type)&&Z()||ee()}:Z;var ln=0,dn={},pn=fe.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in dn)dn[e](void 0,!0)}),ue.cors=!!pn&&"withCredentials"in pn,pn=ue.ajax=!!pn,pn&&fe.ajaxTransport(function(t){if(!t.crossDomain||ue.cors){var n;return{send:function(r,i){var a,o=t.xhr(),s=++ln;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)o[a]=t.xhrFields[a];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)void 0!==r[a]&&o.setRequestHeader(a,r[a]+"");o.send(t.hasContent&&t.data||null),n=function(e,r){var a,l,d;if(n&&(r||4===o.readyState))if(delete dn[s],n=void 0,o.onreadystatechange=fe.noop,r)4!==o.readyState&&o.abort();else{d={},a=o.status,"string"==typeof o.responseText&&(d.text=o.responseText);try{l=o.statusText}catch(e){l=""}a||!t.isLocal||t.crossDomain?1223===a&&(a=204):a=d.text?200:404}d&&i(a,l,d,o.getAllResponseHeaders())},t.async?4===o.readyState?e.setTimeout(n):o.onreadystatechange=dn[s]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=re.head||fe("head")[0]||re.documentElement;return{send:function(r,i){t=re.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var un=[],cn=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=un.pop()||fe.expando+"_"+_t++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,r){var i,a,o,s=t.jsonp!==!1&&(cn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&cn.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(cn,"$1"+i):t.jsonp!==!1&&(t.url+=(Ft.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return o||fe.error(i+" was not called"),o[0]},t.dataTypes[0]="json",a=e[i],e[i]=function(){o=arguments},r.always(function(){void 0===a?fe(e).removeProp(i):e[i]=a,t[i]&&(t.jsonpCallback=n.jsonpCallback,un.push(i)),o&&fe.isFunction(a)&&a(o[0]),o=a=void 0}),"script"}),fe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||re;var r=Te.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=v([e],t,i),i&&i.length&&fe(i).remove(),fe.merge([],r.childNodes))};var fn=fe.fn.load;fe.fn.load=function(e,t,n){if("string"!=typeof e&&fn)return fn.apply(this,arguments);var r,i,a,o=this,s=e.indexOf(" ");return s>-1&&(r=fe.trim(e.slice(s,e.length)),e=e.slice(0,s)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),o.length>0&&fe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){a=arguments,o.html(r?fe("<div>").append(fe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,a||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.filters.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var r,i,a,o,s,l,d,p=fe.css(e,"position"),u=fe(e),c={};"static"===p&&(e.style.position="relative"),s=u.offset(),a=fe.css(e,"top"),l=fe.css(e,"left"),d=("absolute"===p||"fixed"===p)&&fe.inArray("auto",[a,l])>-1,d?(r=u.position(),o=r.top,i=r.left):(o=parseFloat(a)||0,i=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},s))),null!=t.top&&(c.top=t.top-s.top+o),null!=t.left&&(c.left=t.left-s.left+i),"using"in t?t.using.call(e,c):u.css(c)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],a=i&&i.ownerDocument;if(a)return t=a.documentElement,fe.contains(t,i)?("undefined"!=typeof i.getBoundingClientRect&&(r=i.getBoundingClientRect()),n=te(a),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===fe.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),fe.nodeName(e[0],"html")||(n=e.offset()),
n.top+=fe.css(e[0],"borderTopWidth",!0),n.left+=fe.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-fe.css(r,"marginTop",!0),left:t.left-n.left-fe.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!fe.nodeName(e,"html")&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||ft})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);fe.fn[e]=function(r){return qe(this,function(e,r,i){var a=te(e);return void 0===i?a?t in a?a[t]:a.document.documentElement[r]:e[r]:void(a?a.scrollTo(n?fe(a).scrollLeft():i,n?i:fe(a).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=D(ue.pixelPosition,function(e,n){if(n)return n=mt(e,t),ut.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){fe.fn[r]=function(r,i){var a=arguments.length&&(n||"boolean"!=typeof r),o=n||(r===!0||i===!0?"margin":"border");return qe(this,function(t,n,r){var i;return fe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?fe.css(t,n,o):fe.style(t,n,r,o)},t,a?r:void 0,a,null)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.fn.size=function(){return this.length},fe.fn.andSelf=fe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var hn=e.jQuery,mn=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=mn),t&&e.jQuery===fe&&(e.jQuery=hn),fe},t||(e.jQuery=e.$=fe),fe}),!function(){"use strict";function e(e){e.fn.swiper=function(t){var r;return e(this).each(function(){var e=new n(this,t);r||(r=e)}),r}}var t,n=function(e,i){function a(e){return Math.floor(e)}function o(){b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?i.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},b.params.autoplay)}function s(e,n){var r=t(e.target);if(!r.is(n))if("string"==typeof n)r=r.parents(n);else if(n.nodeType){var i;return r.parents().each(function(e,t){t===n&&(i=n)}),i?n:void 0}if(0!==r.length)return r[0]}function l(e,t){t=t||{};var n=window.MutationObserver||window.WebkitMutationObserver,r=new n(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});r.observe(e,{attributes:"undefined"==typeof t.attributes||t.attributes,childList:"undefined"==typeof t.childList||t.childList,characterData:"undefined"==typeof t.characterData||t.characterData}),b.observers.push(r)}function d(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(b.container.parents(".swiper-slide").length>0&&0===b.container.parents(".swiper-slide-active").length)return;var r={left:window.pageXOffset,top:window.pageYOffset},i=window.innerWidth,a=window.innerHeight,o=b.container.offset();b.rtl&&(o.left=o.left-b.container[0].scrollLeft);for(var s=[[o.left,o.top],[o.left+b.width,o.top],[o.left,o.top+b.height],[o.left+b.width,o.top+b.height]],l=0;l<s.length;l++){var d=s[l];d[0]>=r.left&&d[0]<=r.left+i&&d[1]>=r.top&&d[1]<=r.top+a&&(n=!0)}if(!n)return}b.isHorizontal()?((37===t||39===t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):((38===t||40===t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev())}}function p(e){e.originalEvent&&(e=e.originalEvent);var t=b.mousewheel.event,n=0,r=b.rtl?-1:1;if("mousewheel"===t)if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(e.wheelDeltaX)>Math.abs(e.wheelDeltaY)))return;n=e.wheelDeltaX*r}else{if(!(Math.abs(e.wheelDeltaY)>Math.abs(e.wheelDeltaX)))return;n=e.wheelDeltaY}else n=Math.abs(e.wheelDeltaX)>Math.abs(e.wheelDeltaY)?-e.wheelDeltaX*r:-e.wheelDeltaY;else if("DOMMouseScroll"===t)n=-e.detail;else if("wheel"===t)if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(e.deltaX)>Math.abs(e.deltaY)))return;n=-e.deltaX*r}else{if(!(Math.abs(e.deltaY)>Math.abs(e.deltaX)))return;n=-e.deltaY}else n=Math.abs(e.deltaX)>Math.abs(e.deltaY)?-e.deltaX*r:-e.deltaY;if(0!==n){if(b.params.mousewheelInvert&&(n=-n),b.params.freeMode){var i=b.getWrapperTranslate()+n*b.params.mousewheelSensitivity,a=b.isBeginning,o=b.isEnd;if(i>=b.minTranslate()&&(i=b.minTranslate()),i<=b.maxTranslate()&&(i=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(i),b.updateProgress(),b.updateActiveIndex(),(!a&&b.isBeginning||!o&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),0===i||i===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(0>n)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext();else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev();b.mousewheel.lastScrollTime=(new window.Date).getTime()}return b.params.autoplay&&b.stopAutoplay(),e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function u(e,n){e=t(e);var r,i,a,o=b.rtl?-1:1;r=e.attr("data-swiper-parallax")||"0",i=e.attr("data-swiper-parallax-x"),a=e.attr("data-swiper-parallax-y"),i||a?(i=i||"0",a=a||"0"):b.isHorizontal()?(i=r,a="0"):(a=r,i="0"),i=i.indexOf("%")>=0?parseInt(i,10)*n*o+"%":i*n*o+"px",a=a.indexOf("%")>=0?parseInt(a,10)*n+"%":a*n+"px",e.transform("translate3d("+i+", "+a+",0px)")}function c(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof n))return new n(e,i);var f={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,hashnav:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},h=i&&i.virtualTranslate;i=i||{};var m={};for(var g in i)if("object"!=typeof i[g]||null===i[g]||i[g].nodeType||i[g]===window||i[g]===document||"undefined"!=typeof r&&i[g]instanceof r||"undefined"!=typeof jQuery&&i[g]instanceof jQuery)m[g]=i[g];else{m[g]={};for(var v in i[g])m[g][v]=i[g][v]}for(var y in f)if("undefined"==typeof i[y])i[y]=f[y];else if("object"==typeof i[y])for(var w in f[y])"undefined"==typeof i[y][w]&&(i[y][w]=f[y][w]);var b=this;if(b.params=i,b.originalParams=m,b.classNames=[],"undefined"!=typeof t&&"undefined"!=typeof r&&(t=r),("undefined"!=typeof t||(t="undefined"==typeof r?window.Dom7||window.Zepto||window.jQuery:r))&&(b.$=t,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,n=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var r=0;r<n.length;r++)e=n[r],e>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,n=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var r in t)b.params[r]=t[r];b.currentBreakpoint=e,n&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=t(e),0!==b.container.length)){if(b.container.length>1){var x=[];return b.container.each(function(){x.push(new n(this,i))}),x}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push("swiper-container-"+b.params.direction),b.params.freeMode&&b.classNames.push("swiper-container-free-mode"),b.support.flexbox||(b.classNames.push("swiper-container-no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push("swiper-container-autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push("swiper-container-3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push("swiper-container-"+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0,b.params.setWrapperSize=!1),("fade"===b.params.effect||"flip"===b.params.effect)&&(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,b.params.setWrapperSize=!1,"undefined"==typeof h&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=t(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass("swiper-pagination-clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass("swiper-pagination-"+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=t(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=t(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push("swiper-container-rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push("swiper-container-multirow"),b.device.android&&b.classNames.push("swiper-container-android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0},b.params.grabCursor&&(b.container[0].style.cursor="move",b.container[0].style.cursor="-webkit-grab",b.container[0].style.cursor="-moz-grab",b.container[0].style.cursor="grab"),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,n,r,i){function a(){i&&i()}var o;e.complete&&r?a():t?(o=new window.Image,o.onload=a,o.onerror=a,n&&(o.srcset=n),t&&(o.src=t)):a()},b.preloadImages=function(){function e(){"undefined"!=typeof b&&null!==b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))}b.imagesToLoad=b.container.find("img");for(var t=0;t<b.imagesToLoad.length;t++)b.loadImage(b.imagesToLoad[t],b.imagesToLoad[t].currentSrc||b.imagesToLoad[t].getAttribute("src"),b.imagesToLoad[t].srcset||b.imagesToLoad[t].getAttribute("srcset"),!0,e)},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return"undefined"==typeof b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void o())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,o()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?o():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e=b.slides.eq(b.activeIndex)[0];if("undefined"!=typeof e){var t=e.offsetHeight;t&&b.wrapper.css("height",t+"px")}},b.updateContainerSize=function(){var e,t;e="undefined"!=typeof b.params.width?b.params.width:b.container[0].clientWidth,t="undefined"!=typeof b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,n=-b.params.slidesOffsetBefore,r=0,i=0;if("undefined"!=typeof b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var o;b.params.slidesPerColumn>1&&(o=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(o=Math.max(o,b.params.slidesPerView*b.params.slidesPerColumn)));var s,l=b.params.slidesPerColumn,d=o/l,p=d-(b.params.slidesPerColumn*d-b.slides.length);for(e=0;e<b.slides.length;e++){s=0;var u=b.slides.eq(e);if(b.params.slidesPerColumn>1){var c,f,h;"column"===b.params.slidesPerColumnFill?(f=Math.floor(e/l),h=e-f*l,(f>p||f===p&&h===l-1)&&++h>=l&&(h=0,f++),c=f+h*o/l,u.css({"-webkit-box-ordinal-group":c,"-moz-box-ordinal-group":c,"-ms-flex-order":c,"-webkit-order":c,order:c})):(h=Math.floor(e/d),f=e-h*d),u.css({"margin-top":0!==h&&b.params.spaceBetween&&b.params.spaceBetween+"px"}).attr("data-swiper-column",f).attr("data-swiper-row",h)}"none"!==u.css("display")&&("auto"===b.params.slidesPerView?(s=b.isHorizontal()?u.outerWidth(!0):u.outerHeight(!0),b.params.roundLengths&&(s=a(s))):(s=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(s=a(s)),b.isHorizontal()?b.slides[e].style.width=s+"px":b.slides[e].style.height=s+"px"),b.slides[e].swiperSlideSize=s,b.slidesSizesGrid.push(s),b.params.centeredSlides?(n=n+s/2+r/2+t,0===e&&(n=n-b.size/2-t),Math.abs(n)<.001&&(n=0),i%b.params.slidesPerGroup===0&&b.snapGrid.push(n),b.slidesGrid.push(n)):(i%b.params.slidesPerGroup===0&&b.snapGrid.push(n),b.slidesGrid.push(n),n=n+s+t),b.virtualSize+=s+t,r=s,i++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),(!b.support.flexbox||b.params.setWrapperSize)&&(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(s+b.params.spaceBetween)*o,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.updateSlidesProgress=function(e){if("undefined"==typeof e&&(e=b.translate||0),0!==b.slides.length){"undefined"==typeof b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var n=0;n<b.slides.length;n++){var r=b.slides[n],i=(t-r.swiperSlideOffset)/(r.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var a=-(t-r.swiperSlideOffset),o=a+b.slidesSizesGrid[n],s=a>=0&&a<b.size||o>0&&o<=b.size||0>=a&&o>=b.size;s&&b.slides.eq(n).addClass(b.params.slideVisibleClass)}r.progress=b.rtl?-i:i}}},b.updateProgress=function(e){"undefined"==typeof e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),n=b.isBeginning,r=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!n&&b.emit("onReachBeginning",b),b.isEnd&&!r&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,n,r=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)"undefined"!=typeof b.slidesGrid[t+1]?r>=b.slidesGrid[t]&&r<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:r>=b.slidesGrid[t]&&r<b.slidesGrid[t+1]&&(e=t+1):r>=b.slidesGrid[t]&&(e=t);(0>e||"undefined"==typeof e)&&(e=0),n=Math.floor(e/b.params.slidesPerGroup),n>=b.snapGrid.length&&(n=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=n,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses())},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass);var e=b.slides.eq(b.activeIndex);e.addClass(b.params.slideActiveClass);var n=e.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===n.length&&b.slides.eq(0).addClass(b.params.slideNextClass);var r=e.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===r.length&&b.slides.eq(-1).addClass(b.params.slidePrevClass),b.paginationContainer&&b.paginationContainer.length>0){var i,a=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?(i=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup),i>b.slides.length-1-2*b.loopedSlides&&(i-=b.slides.length-2*b.loopedSlides),i>a-1&&(i-=a),0>i&&"bullets"!==b.params.paginationType&&(i=a+i)):i="undefined"!=typeof b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){t(this).index()===i&&t(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(i).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(i+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(a)),"progress"===b.params.paginationType){var o=(i+1)/a,s=o,l=1;b.isHorizontal()||(l=o,s=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+s+") scaleY("+l+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,i+1,a)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,n=0;t>n;n++)e+=b.params.paginationBulletRender?b.params.paginationBulletRender(n,b.params.bulletClass):"<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){r=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(r),b.updateActiveIndex(),b.updateClasses()}if(b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),e){var n,r;b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(n=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0),n||t())}else b.params.autoHeight&&b.updateAutoHeight()},b.onResize=function(e){b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,n=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var r=!1;if(b.params.freeMode){var i=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(i),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),r=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!r&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=n};var T=["mousedown","mousemove","mouseup"];window.navigator.pointerEnabled?T=["pointerdown","pointermove","pointerup"]:window.navigator.msPointerEnabled&&(T=["MSPointerDown","MSPointerMove","MSPointerUp"]),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":T[0],move:b.support.touch||!b.params.simulateTouch?"touchmove":T[1],end:b.support.touch||!b.params.simulateTouch?"touchend":T[2]},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",r="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],a=b.support.touch?r:document,o=!!b.params.nested;b.browser.ie?(r[n](b.touchEvents.start,b.onTouchStart,!1),a[n](b.touchEvents.move,b.onTouchMove,o),a[n](b.touchEvents.end,b.onTouchEnd,!1)):(b.support.touch&&(r[n](b.touchEvents.start,b.onTouchStart,!1),r[n](b.touchEvents.move,b.onTouchMove,o),r[n](b.touchEvents.end,b.onTouchEnd,!1)),!i.simulateTouch||b.device.ios||b.device.android||(r[n]("mousedown",b.onTouchStart,!1),document[n]("mousemove",b.onTouchMove,o),document[n]("mouseup",b.onTouchEnd,!1))),window[n]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&r[n]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),(!b.isEnd||b.params.loop)&&b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),(!b.isBeginning||b.params.loop)&&b.slidePrev()},b.onClickIndex=function(e){e.preventDefault();var n=t(this).index()*b.params.slidesPerGroup;b.params.loop&&(n+=b.loopedSlides),b.slideTo(n)},b.updateClickedSlide=function(e){var n=s(e,"."+b.params.slideClass),r=!1;if(n)for(var i=0;i<b.slides.length;i++)b.slides[i]===n&&(r=!0);if(!n||!r)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=n,b.clickedIndex=t(n).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var a,o=b.clickedIndex;if(b.params.loop){if(b.animating)return;a=t(b.clickedSlide).attr("data-swiper-slide-index"),b.params.centeredSlides?o<b.loopedSlides-b.params.slidesPerView/2||o>b.slides.length-b.loopedSlides+b.params.slidesPerView/2?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+a+'"]:not(.swiper-slide-duplicate)').eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o):o>b.slides.length-b.params.slidesPerView?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+a+'"]:not(.swiper-slide-duplicate)').eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o)}else b.slideTo(o)}};var C,S,E,k,M,N,z,L,D,P,A="input, select, textarea, button",H=Date.now(),I=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var B,O;if(b.onTouchStart=function(e){if(e.originalEvent&&(e=e.originalEvent),B="touchstart"===e.type,B||!("which"in e)||3!==e.which){if(b.params.noSwiping&&s(e,"."+b.params.noSwipingClass))return void(b.allowClick=!0);if(!b.params.swipeHandler||s(e,b.params.swipeHandler)){var n=b.touches.currentX="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,r=b.touches.currentY="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&n<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,S=!1,E=!0,M=void 0,O=void 0,b.touches.startX=n,b.touches.startY=r,k=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(L=!1),"touchstart"!==e.type){var i=!0;t(e.target).is(A)&&(i=!1),document.activeElement&&t(document.activeElement).is(A)&&document.activeElement.blur(),i&&e.preventDefault()}b.emit("onTouchStart",b,e)}}}},b.onTouchMove=function(e){if(e.originalEvent&&(e=e.originalEvent),!B||"mousemove"!==e.type){if(e.preventedByNestedSwiper)return b.touches.startX="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,void(b.touches.startY="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,b.touches.startY=b.touches.currentY="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,
k=Date.now()));if(B&&document.activeElement&&e.target===document.activeElement&&t(e.target).is(A))return S=!0,void(b.allowClick=!1);if(E&&b.emit("onTouchMove",b,e),!(e.targetTouches&&e.targetTouches.length>1)){if(b.touches.currentX="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,b.touches.currentY="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,"undefined"==typeof M){var n=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI;M=b.isHorizontal()?n>b.params.touchAngle:90-n>b.params.touchAngle}if(M&&b.emit("onTouchMoveOpposite",b,e),"undefined"==typeof O&&b.browser.ieTouch&&(b.touches.currentX!==b.touches.startX||b.touches.currentY!==b.touches.startY)&&(O=!0),C){if(M)return void(C=!1);if(O||!b.browser.ieTouch){b.allowClick=!1,b.emit("onSliderMove",b,e),e.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&e.stopPropagation(),S||(i.loop&&b.fixLoop(),z=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),P=!1,b.params.grabCursor&&(b.container[0].style.cursor="move",b.container[0].style.cursor="-webkit-grabbing",b.container[0].style.cursor="-moz-grabbin",b.container[0].style.cursor="grabbing")),S=!0;var r=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;r*=b.params.touchRatio,b.rtl&&(r=-r),b.swipeDirection=r>0?"prev":"next",N=r+z;var a=!0;if(r>0&&N>b.minTranslate()?(a=!1,b.params.resistance&&(N=b.minTranslate()-1+Math.pow(-b.minTranslate()+z+r,b.params.resistanceRatio))):0>r&&N<b.maxTranslate()&&(a=!1,b.params.resistance&&(N=b.maxTranslate()+1-Math.pow(b.maxTranslate()-z-r,b.params.resistanceRatio))),a&&(e.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&z>N&&(N=z),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&N>z&&(N=z),b.params.followFinger){if(b.params.threshold>0){if(!(Math.abs(r)>b.params.threshold||L))return void(N=z);if(!L)return L=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,N=z,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}(b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===I.length&&I.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:k}),I.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(N),b.setWrapperTranslate(N)}}}}}},b.onTouchEnd=function(e){if(e.originalEvent&&(e=e.originalEvent),E&&b.emit("onTouchEnd",b,e),E=!1,C){b.params.grabCursor&&S&&C&&(b.container[0].style.cursor="move",b.container[0].style.cursor="-webkit-grab",b.container[0].style.cursor="-moz-grab",b.container[0].style.cursor="grab");var n=Date.now(),r=n-k;if(b.allowClick&&(b.updateClickedSlide(e),b.emit("onTap",b,e),300>r&&n-H>300&&(D&&clearTimeout(D),D=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!t(e.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,e))},300)),300>r&&300>n-H&&(D&&clearTimeout(D),b.emit("onDoubleTap",b,e))),H=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),!C||!S||!b.swipeDirection||0===b.touches.diff||N===z)return void(C=S=!1);C=S=!1;var i;if(i=b.params.followFinger?b.rtl?b.translate:-b.translate:-N,b.params.freeMode){if(i<-b.minTranslate())return void b.slideTo(b.activeIndex);if(i>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(I.length>1){var a=I.pop(),o=I.pop(),s=a.position-o.position,l=a.time-o.time;b.velocity=s/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-a.time>300)&&(b.velocity=0)}else b.velocity=0;I.length=0;var d=1e3*b.params.freeModeMomentumRatio,p=b.velocity*d,u=b.translate+p;b.rtl&&(u=-u);var c,f=!1,h=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(u<b.maxTranslate())b.params.freeModeMomentumBounce?(u+b.maxTranslate()<-h&&(u=b.maxTranslate()-h),c=b.maxTranslate(),f=!0,P=!0):u=b.maxTranslate();else if(u>b.minTranslate())b.params.freeModeMomentumBounce?(u-b.minTranslate()>h&&(u=b.minTranslate()+h),c=b.minTranslate(),f=!0,P=!0):u=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-u){m=g;break}u=Math.abs(b.snapGrid[m]-u)<Math.abs(b.snapGrid[m-1]-u)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(u=-u)}if(0!==b.velocity)d=b.rtl?Math.abs((-u-b.translate)/b.velocity):Math.abs((u-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&f?(b.updateProgress(c),b.setWrapperTransition(d),b.setWrapperTranslate(u),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&P&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(c),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(u),b.setWrapperTransition(d),b.setWrapperTranslate(u),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(u),b.updateActiveIndex()}return void((!b.params.freeModeMomentum||r>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex()))}var v,y=0,w=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)"undefined"!=typeof b.slidesGrid[v+b.params.slidesPerGroup]?i>=b.slidesGrid[v]&&i<b.slidesGrid[v+b.params.slidesPerGroup]&&(y=v,w=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):i>=b.slidesGrid[v]&&(y=v,w=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(i-b.slidesGrid[y])/w;if(r>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(y+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(y)}}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,n,r){"undefined"==typeof n&&(n=!0),"undefined"==typeof e&&(e=0),0>e&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var i=-b.snapGrid[b.snapIndex];b.params.autoplay&&b.autoplaying&&(r||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(i);for(var a=0;a<b.slidesGrid.length;a++)-Math.floor(100*i)>=Math.floor(100*b.slidesGrid[a])&&(e=a);return!(!b.params.allowSwipeToNext&&i<b.translate&&i<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&i>b.translate&&i>b.maxTranslate()&&(b.activeIndex||0)!==e)&&("undefined"==typeof t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.rtl&&-i===b.translate||!b.rtl&&i===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(i),!1):(b.updateClasses(),b.onTransitionStart(n),0===t?(b.setWrapperTranslate(i),b.setWrapperTransition(0),b.onTransitionEnd(n)):(b.setWrapperTranslate(i),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(n)}))),!0)))},b.onTransitionStart=function(e){"undefined"==typeof e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),"undefined"==typeof e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,n){return b.params.loop?!b.animating&&(b.fixLoop(),b.container[0].clientLeft,b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)):b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,n){return b.params.loop?!b.animating&&(b.fixLoop(),b.container[0].clientLeft,b.slideTo(b.activeIndex-1,t,e,n)):b.slideTo(b.activeIndex-1,t,e,n)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,n){return b.slideTo(b.activeIndex,t,e)},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,n){var r=0,i=0,o=0;b.isHorizontal()?r=b.rtl?-e:e:i=e,b.params.roundLengths&&(r=a(r),i=a(i)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+r+"px, "+i+"px, "+o+"px)"):b.wrapper.transform("translate("+r+"px, "+i+"px)")),b.translate=b.isHorizontal()?r:i;var s,l=b.maxTranslate()-b.minTranslate();s=0===l?0:(e-b.minTranslate())/l,s!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,n),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var n,r,i,a;return"undefined"==typeof t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(i=window.getComputedStyle(e,null),window.WebKitCSSMatrix?(r=i.transform||i.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),a=new window.WebKitCSSMatrix("none"===r?"":r)):(a=i.MozTransform||i.OTransform||i.MsTransform||i.msTransform||i.transform||i.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=a.toString().split(",")),"x"===t&&(r=window.WebKitCSSMatrix?a.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(r=window.WebKitCSSMatrix?a.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),b.rtl&&r&&(r=-r),r||0)},b.getWrapperTranslate=function(e){return"undefined"==typeof e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)l(e[t]);l(b.container[0],{childList:!1}),l(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var e=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=e.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>e.length&&(b.loopedSlides=e.length);var n,r=[],i=[];for(e.each(function(n,a){var o=t(this);n<b.loopedSlides&&i.push(a),n<e.length&&n>=e.length-b.loopedSlides&&r.push(a),o.attr("data-swiper-slide-index",n)}),n=0;n<i.length;n++)b.wrapper.append(t(i[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(n=r.length-1;n>=0;n--)b.wrapper.prepend(t(r[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&b.wrapper.prepend(e[n]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,n=b.activeIndex;if("object"==typeof e&&e.length){for(var r=0;r<e.length;r++)t=e[r],b.slides[t]&&b.slides.eq(t).remove(),n>t&&n--;n=Math.max(n,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),n>t&&n--,n=Math.max(n,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(n+b.loopedSlides,0,!1):b.slideTo(n,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),n=t[0].swiperSlideOffset,r=-n;b.params.virtualTranslate||(r-=b.translate);var i=0;b.isHorizontal()||(i=r,r=0);var a=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform("translate3d("+r+"px, "+i+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)b.wrapper.trigger(e[n])}})}}},flip:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var n=b.slides.eq(e),r=n[0].progress;b.params.flip.limitRotation&&(r=Math.max(Math.min(n[0].progress,1),-1));var i=n[0].swiperSlideOffset,a=-180*r,o=a,s=0,l=-i,d=0;if(b.isHorizontal()?b.rtl&&(o=-o):(d=l,l=0,s=-o,o=0),n[0].style.zIndex=-Math.abs(Math.round(r))+b.slides.length,b.params.flip.slideShadows){var p=b.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),u=b.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===p.length&&(p=t('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),n.append(p)),0===u.length&&(u=t('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),n.append(u)),p.length&&(p[0].style.opacity=Math.max(-r,0)),u.length&&(u[0].style.opacity=Math.max(r,0))}n.transform("translate3d("+l+"px, "+d+"px, 0px) rotateX("+s+"deg) rotateY("+o+"deg)")}},setTransition:function(e){if(b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.virtualTranslate&&0!==e){var n=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!n&&b&&t(this).hasClass(b.params.slideActiveClass)){n=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=0;r<e.length;r++)b.wrapper.trigger(e[r])}})}}},cube:{setTranslate:function(){var e,n=0;b.params.cube.shadow&&(b.isHorizontal()?(e=b.wrapper.find(".swiper-cube-shadow"),0===e.length&&(e=t('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(e)),e.css({height:b.width+"px"})):(e=b.container.find(".swiper-cube-shadow"),0===e.length&&(e=t('<div class="swiper-cube-shadow"></div>'),b.container.append(e))));for(var r=0;r<b.slides.length;r++){var i=b.slides.eq(r),a=90*r,o=Math.floor(a/360);b.rtl&&(a=-a,o=Math.floor(-a/360));var s=Math.max(Math.min(i[0].progress,1),-1),l=0,d=0,p=0;r%4===0?(l=4*-o*b.size,p=0):(r-1)%4===0?(l=0,p=4*-o*b.size):(r-2)%4===0?(l=b.size+4*o*b.size,p=b.size):(r-3)%4===0&&(l=-b.size,p=3*b.size+4*b.size*o),b.rtl&&(l=-l),b.isHorizontal()||(d=l,l=0);var u="rotateX("+(b.isHorizontal()?0:-a)+"deg) rotateY("+(b.isHorizontal()?a:0)+"deg) translate3d("+l+"px, "+d+"px, "+p+"px)";if(1>=s&&s>-1&&(n=90*r+90*s,b.rtl&&(n=90*-r-90*s)),i.transform(u),b.params.cube.slideShadows){var c=b.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),f=b.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===c.length&&(c=t('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),i.append(c)),0===f.length&&(f=t('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),i.append(f)),c.length&&(c[0].style.opacity=Math.max(-s,0)),f.length&&(f[0].style.opacity=Math.max(s,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())e.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var h=Math.abs(n)-90*Math.floor(Math.abs(n)/90),m=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,y=b.params.cube.shadowOffset;e.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+y)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var w=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(b.isHorizontal()?0:n)+"deg) rotateY("+(b.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var e=b.translate,n=b.isHorizontal()?-e+b.width/2:-e+b.height/2,r=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,i=b.params.coverflow.depth,a=0,o=b.slides.length;o>a;a++){var s=b.slides.eq(a),l=b.slidesSizesGrid[a],d=s[0].swiperSlideOffset,p=(n-d-l/2)/l*b.params.coverflow.modifier,u=b.isHorizontal()?r*p:0,c=b.isHorizontal()?0:r*p,f=-i*Math.abs(p),h=b.isHorizontal()?0:b.params.coverflow.stretch*p,m=b.isHorizontal()?b.params.coverflow.stretch*p:0;Math.abs(m)<.001&&(m=0),Math.abs(h)<.001&&(h=0),Math.abs(f)<.001&&(f=0),Math.abs(u)<.001&&(u=0),Math.abs(c)<.001&&(c=0);var g="translate3d("+m+"px,"+h+"px,"+f+"px)  rotateX("+c+"deg) rotateY("+u+"deg)";if(s.transform(g),s[0].style.zIndex=-Math.abs(Math.round(p))+1,b.params.coverflow.slideShadows){var v=b.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),y=b.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===v.length&&(v=t('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),s.append(v)),0===y.length&&(y=t('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),s.append(y)),v.length&&(v[0].style.opacity=p>0?p:0),y.length&&(y[0].style.opacity=-p>0?-p:0)}}if(b.browser.ie){var w=b.wrapper[0].style;w.perspectiveOrigin=n+"px 50%"}},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(e,n){if("undefined"!=typeof e&&("undefined"==typeof n&&(n=!0),0!==b.slides.length)){var r=b.slides.eq(e),i=r.find(".swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)");!r.hasClass("swiper-lazy")||r.hasClass("swiper-lazy-loaded")||r.hasClass("swiper-lazy-loading")||(i=i.add(r[0])),0!==i.length&&i.each(function(){var e=t(this);e.addClass("swiper-lazy-loading");var i=e.attr("data-background"),a=e.attr("data-src"),o=e.attr("data-srcset");b.loadImage(e[0],a||i,o,!1,function(){if(i?(e.css("background-image",'url("'+i+'")'),e.removeAttr("data-background")):(o&&(e.attr("srcset",o),e.removeAttr("data-srcset")),a&&(e.attr("src",a),e.removeAttr("data-src"))),e.addClass("swiper-lazy-loaded").removeClass("swiper-lazy-loading"),r.find(".swiper-lazy-preloader, .preloader").remove(),b.params.loop&&n){var t=r.attr("data-swiper-slide-index");if(r.hasClass(b.params.slideDuplicateClass)){var s=b.wrapper.children('[data-swiper-slide-index="'+t+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(s.index(),!1)}else{var l=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+t+'"]');b.lazy.loadImageInSlide(l.index(),!1)}}b.emit("onLazyImageReady",b,r[0],e[0])}),b.emit("onLazyImageLoad",b,r[0],e[0])})}},load:function(){var e;if(b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(t(this).index())});else if(b.params.slidesPerView>1)for(e=b.activeIndex;e<b.activeIndex+b.params.slidesPerView;e++)b.slides[e]&&b.lazy.loadImageInSlide(e);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(b.params.slidesPerView>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var n=b.params.lazyLoadingInPrevNextAmount,r=b.params.slidesPerView,i=Math.min(b.activeIndex+r+Math.max(n,r),b.slides.length),a=Math.max(b.activeIndex-Math.max(r,n),0);for(e=b.activeIndex+b.params.slidesPerView;i>e;e++)b.slides[e]&&b.lazy.loadImageInSlide(e);for(e=a;e<b.activeIndex;e++)b.slides[e]&&b.lazy.loadImageInSlide(e)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var s=b.wrapper.children("."+b.params.slidePrevClass);s.length>0&&b.lazy.loadImageInSlide(s.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,n=b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY,r=n-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,i=-b.minTranslate()*t.moveDivider,a=-b.maxTranslate()*t.moveDivider;i>r?r=i:r>a&&(r=a),r=-r/t.moveDivider,b.updateProgress(r),b.setWrapperTranslate(r,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},enableDraggable:function(){var e=b.scrollbar,n=b.support.touch?e.track:document;t(e.track).on(b.touchEvents.start,e.dragStart),t(n).on(b.touchEvents.move,e.dragMove),t(n).on(b.touchEvents.end,e.dragEnd)},disableDraggable:function(){var e=b.scrollbar,n=b.support.touch?e.track:document;t(e.track).off(b.touchEvents.start,e.dragStart),t(n).off(b.touchEvents.move,e.dragMove),t(n).off(b.touchEvents.end,e.dragEnd)},set:function(){if(b.params.scrollbar){var e=b.scrollbar;e.track=t(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&e.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(e.track=b.container.find(b.params.scrollbar)),e.drag=e.track.find(".swiper-scrollbar-drag"),0===e.drag.length&&(e.drag=t('<div class="swiper-scrollbar-drag"></div>'),e.track.append(e.drag)),e.drag[0].style.width="",e.drag[0].style.height="",e.trackSize=b.isHorizontal()?e.track[0].offsetWidth:e.track[0].offsetHeight,e.divider=b.size/b.virtualSize,e.moveDivider=e.divider*(e.trackSize/b.size),e.dragSize=e.trackSize*e.divider,b.isHorizontal()?e.drag[0].style.width=e.dragSize+"px":e.drag[0].style.height=e.dragSize+"px",e.divider>=1?e.track[0].style.display="none":e.track[0].style.display="",b.params.scrollbarHide&&(e.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,n=(b.translate||0,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e,e>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e)):0>e?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){this.x=e,this.y=t,this.lastIndex=e.length-1;var n,r;this.x.length,this.interpolate=function(e){return e?(r=i(this.x,e),n=r-1,(e-this.x[n])*(this.y[r]-this.y[n])/(this.x[r]-this.x[n])+this.y[n]):0};var i=function(){var e,t,n;return function(r,i){for(t=-1,e=r.length;e-t>1;)r[n=e+t>>1]<=i?t=n:e=n;return e}}()},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,t){function r(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),a=-b.controller.spline.interpolate(-e)),a&&"container"!==b.params.controlBy||(i=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),a=(e-b.minTranslate())*i+t.minTranslate()),b.params.controlInverse&&(a=t.maxTranslate()-a),t.updateProgress(a),t.setWrapperTranslate(a,!1,b),t.updateActiveIndex()}var i,a,o=b.params.control;if(b.isArray(o))for(var s=0;s<o.length;s++)o[s]!==t&&o[s]instanceof n&&r(o[s]);else o instanceof n&&t!==o&&r(o)},setTransition:function(e,t){function r(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){a&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var i,a=b.params.control;if(b.isArray(a))for(i=0;i<a.length;i++)a[i]!==t&&a[i]instanceof n&&r(a[i]);else a instanceof n&&t!==a&&r(a)}},b.hashnav={init:function(){if(b.params.hashnav){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=0,r=b.slides.length;r>n;n++){var i=b.slides.eq(n),a=i.attr("data-hash");if(a===e&&!i.hasClass(b.params.slideDuplicateClass)){var o=i.index();b.slideTo(o,t,b.params.runCallbacksOnInit,!0)}}}},setHash:function(){b.hashnav.initialized&&b.params.hashnav&&(document.location.hash=b.slides.eq(b.activeIndex).attr("data-hash")||"")}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,t(document).off("keydown",d)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,t(document).on("keydown",d)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl){try{new window.WheelEvent("wheel"),b.mousewheel.event="wheel"}catch(e){(window.WheelEvent||b.container[0]&&"wheel"in b.container[0])&&(b.mousewheel.event="wheel")}!b.mousewheel.event&&window.WheelEvent,b.mousewheel.event||void 0===document.onmousewheel||(b.mousewheel.event="mousewheel"),b.mousewheel.event||(b.mousewheel.event="DOMMouseScroll")}b.disableMousewheelControl=function(){return!!b.mousewheel.event&&(b.container.off(b.mousewheel.event,p),!0)},b.enableMousewheelControl=function(){return!!b.mousewheel.event&&(b.container.on(b.mousewheel.event,p),!0)},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){u(this,b.progress)}),b.slides.each(function(){var e=t(this);e.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var t=Math.min(Math.max(e[0].progress,-1),1);u(this,t)})})},setTransition:function(e){"undefined"==typeof e&&(e=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var n=t(this),r=parseInt(n.attr("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),n.transition(r)})}},b._plugins=[];for(var j in b.plugins){var q=b.plugins[j](b,b.params[j]);q&&b._plugins.push(q)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=c(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var n;if(e=c(e),"undefined"==typeof t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(n=0;n<b.emitterEventListeners[e].length;n++)b.emitterEventListeners[e][n]===t&&b.emitterEventListeners[e].splice(n,1);return b}},b.once=function(e,t){e=c(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,n)};return b.on(e,n),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){13===e.keyCode&&(t(e.target).is(b.params.nextButton)?(b.onClickNext(e),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):t(e.target).is(b.params.prevButton)&&(b.onClickPrev(e),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),t(e.target).is("."+b.params.bulletClass)&&t(e.target)[0].click())},liveRegion:t('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),
notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),t(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var e=t(this);b.a11y.makeFocusable(e),b.a11y.addRole(e,"button"),b.a11y.addLabel(e,b.params.paginationBulletMessage.replace(/{{index}}/,e.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&t(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&t(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.emit("onDestroy"),e!==!1&&(b=null)},b.init(),b}};n.prototype={isSafari:function(){var e=navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1},device:function(){var e=navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),r=e.match(/(iPod)(.*OS\s([\d_]+))?/),i=!n&&e.match(/(iPhone\sOS)\s([\d_]+)/);return{ios:n||i||r,android:t}}(),support:{touch:window.Modernizr&&Modernizr.touch===!0||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&Modernizr.csstransforms3d===!0||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:function(){return"MutationObserver"in window||"WebkitMutationObserver"in window}()},plugins:{}};for(var r=(function(){var e=function(e){var t=this,n=0;for(n=0;n<e.length;n++)t[n]=e[n];return t.length=e.length,this},t=function(t,n){var r=[],i=0;if(t&&!n&&t instanceof e)return t;if(t)if("string"==typeof t){var a,o,s=t.trim();if(s.indexOf("<")>=0&&s.indexOf(">")>=0){var l="div";for(0===s.indexOf("<li")&&(l="ul"),0===s.indexOf("<tr")&&(l="tbody"),(0===s.indexOf("<td")||0===s.indexOf("<th"))&&(l="tr"),0===s.indexOf("<tbody")&&(l="table"),0===s.indexOf("<option")&&(l="select"),o=document.createElement(l),o.innerHTML=t,i=0;i<o.childNodes.length;i++)r.push(o.childNodes[i])}else for(a=n||"#"!==t[0]||t.match(/[ .<>:~]/)?(n||document).querySelectorAll(t):[document.getElementById(t.split("#")[1])],i=0;i<a.length;i++)a[i]&&r.push(a[i])}else if(t.nodeType||t===window||t===document)r.push(t);else if(t.length>0&&t[0].nodeType)for(i=0;i<t.length;i++)r.push(t[i]);return new e(r)};return e.prototype={addClass:function(e){if("undefined"==typeof e)return this;for(var t=e.split(" "),n=0;n<t.length;n++)for(var r=0;r<this.length;r++)this[r].classList.add(t[n]);return this},removeClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var r=0;r<this.length;r++)this[r].classList.remove(t[n]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var r=0;r<this.length;r++)this[r].classList.toggle(t[n]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n++)if(2===arguments.length)this[n].setAttribute(e,t);else for(var r in e)this[n][r]=e[r],this[n].setAttribute(r,e[r]);return this},removeAttr:function(e){for(var t=0;t<this.length;t++)this[t].removeAttribute(e);return this},data:function(e,t){if("undefined"!=typeof t){for(var n=0;n<this.length;n++){var r=this[n];r.dom7ElementDataStorage||(r.dom7ElementDataStorage={}),r.dom7ElementDataStorage[e]=t}return this}if(this[0]){var i=this[0].getAttribute("data-"+e);return i?i:this[0].dom7ElementDataStorage&&e in this[0].dom7ElementDataStorage?this[0].dom7ElementDataStorage[e]:void 0}},transform:function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this},on:function(e,n,r,i){function a(e){var i=e.target;if(t(i).is(n))r.call(i,e);else for(var a=t(i).parents(),o=0;o<a.length;o++)t(a[o]).is(n)&&r.call(a[o],e)}var o,s,l=e.split(" ");for(o=0;o<this.length;o++)if("function"==typeof n||n===!1)for("function"==typeof n&&(r=arguments[1],i=arguments[2]||!1),s=0;s<l.length;s++)this[o].addEventListener(l[s],r,i);else for(s=0;s<l.length;s++)this[o].dom7LiveListeners||(this[o].dom7LiveListeners=[]),this[o].dom7LiveListeners.push({listener:r,liveListener:a}),this[o].addEventListener(l[s],a,i);return this},off:function(e,t,n,r){for(var i=e.split(" "),a=0;a<i.length;a++)for(var o=0;o<this.length;o++)if("function"==typeof t||t===!1)"function"==typeof t&&(n=arguments[1],r=arguments[2]||!1),this[o].removeEventListener(i[a],n,r);else if(this[o].dom7LiveListeners)for(var s=0;s<this[o].dom7LiveListeners.length;s++)this[o].dom7LiveListeners[s].listener===n&&this[o].removeEventListener(i[a],this[o].dom7LiveListeners[s].liveListener,r);return this},once:function(e,t,n,r){function i(o){n(o),a.off(e,t,i,r)}var a=this;"function"==typeof t&&(t=!1,n=arguments[1],r=arguments[2]),a.on(e,t,i,r)},trigger:function(e,t){for(var n=0;n<this.length;n++){var r;try{r=new window.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0})}catch(n){r=document.createEvent("Event"),r.initEvent(e,!0,!0),r.detail=t}this[n].dispatchEvent(r)}return this},transitionEnd:function(e){function t(a){if(a.target===this)for(e.call(this,a),n=0;n<r.length;n++)i.off(r[n],t)}var n,r=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=this;if(e)for(n=0;n<r.length;n++)i.on(r[n],t);return this},width:function(){return this[0]===window?window.innerWidth:this.length>0?parseFloat(this.css("width")):null},outerWidth:function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null},height:function(){return this[0]===window?window.innerHeight:this.length>0?parseFloat(this.css("height")):null},outerHeight:function(e){return this.length>0?e?this[0].offsetHeight+parseFloat(this.css("margin-top"))+parseFloat(this.css("margin-bottom")):this[0].offsetHeight:null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),n=document.body,r=e.clientTop||n.clientTop||0,i=e.clientLeft||n.clientLeft||0,a=window.pageYOffset||e.scrollTop,o=window.pageXOffset||e.scrollLeft;return{top:t.top+a-r,left:t.left+o-i}}return null},css:function(e,t){var n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n++)for(var r in e)this[n].style[r]=e[r];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n++)this[n].style[e]=t;return this}return this},each:function(e){for(var t=0;t<this.length;t++)e.call(this[t],t,this[t]);return this},html:function(e){if("undefined"==typeof e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t++)this[t].innerHTML=e;return this},text:function(e){if("undefined"==typeof e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t++)this[t].textContent=e;return this},is:function(n){if(!this[0])return!1;var r,i;if("string"==typeof n){var a=this[0];if(a===document)return n===document;if(a===window)return n===window;if(a.matches)return a.matches(n);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(n);if(a.mozMatchesSelector)return a.mozMatchesSelector(n);if(a.msMatchesSelector)return a.msMatchesSelector(n);for(r=t(n),i=0;i<r.length;i++)if(r[i]===this[0])return!0;return!1}if(n===document)return this[0]===document;if(n===window)return this[0]===window;if(n.nodeType||n instanceof e){for(r=n.nodeType?[n]:n,i=0;i<r.length;i++)if(r[i]===this[0])return!0;return!1}return!1},index:function(){if(this[0]){for(var e=this[0],t=0;null!==(e=e.previousSibling);)1===e.nodeType&&t++;return t}},eq:function(t){if("undefined"==typeof t)return this;var n,r=this.length;return t>r-1?new e([]):0>t?(n=r+t,new e(0>n?[]:[this[n]])):new e([this[t]])},append:function(t){var n,r;for(n=0;n<this.length;n++)if("string"==typeof t){var i=document.createElement("div");for(i.innerHTML=t;i.firstChild;)this[n].appendChild(i.firstChild)}else if(t instanceof e)for(r=0;r<t.length;r++)this[n].appendChild(t[r]);else this[n].appendChild(t);return this},prepend:function(t){var n,r;for(n=0;n<this.length;n++)if("string"==typeof t){var i=document.createElement("div");for(i.innerHTML=t,r=i.childNodes.length-1;r>=0;r--)this[n].insertBefore(i.childNodes[r],this[n].childNodes[0])}else if(t instanceof e)for(r=0;r<t.length;r++)this[n].insertBefore(t[r],this[n].childNodes[0]);else this[n].insertBefore(t,this[n].childNodes[0]);return this},insertBefore:function(e){for(var n=t(e),r=0;r<this.length;r++)if(1===n.length)n[0].parentNode.insertBefore(this[r],n[0]);else if(n.length>1)for(var i=0;i<n.length;i++)n[i].parentNode.insertBefore(this[r].cloneNode(!0),n[i])},insertAfter:function(e){for(var n=t(e),r=0;r<this.length;r++)if(1===n.length)n[0].parentNode.insertBefore(this[r],n[0].nextSibling);else if(n.length>1)for(var i=0;i<n.length;i++)n[i].parentNode.insertBefore(this[r].cloneNode(!0),n[i].nextSibling)},next:function(n){return new e(this.length>0?n?this[0].nextElementSibling&&t(this[0].nextElementSibling).is(n)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])},nextAll:function(n){var r=[],i=this[0];if(!i)return new e([]);for(;i.nextElementSibling;){var a=i.nextElementSibling;n?t(a).is(n)&&r.push(a):r.push(a),i=a}return new e(r)},prev:function(n){return new e(this.length>0?n?this[0].previousElementSibling&&t(this[0].previousElementSibling).is(n)?[this[0].previousElementSibling]:[]:this[0].previousElementSibling?[this[0].previousElementSibling]:[]:[])},prevAll:function(n){var r=[],i=this[0];if(!i)return new e([]);for(;i.previousElementSibling;){var a=i.previousElementSibling;n?t(a).is(n)&&r.push(a):r.push(a),i=a}return new e(r)},parent:function(e){for(var n=[],r=0;r<this.length;r++)e?t(this[r].parentNode).is(e)&&n.push(this[r].parentNode):n.push(this[r].parentNode);return t(t.unique(n))},parents:function(e){for(var n=[],r=0;r<this.length;r++)for(var i=this[r].parentNode;i;)e?t(i).is(e)&&n.push(i):n.push(i),i=i.parentNode;return t(t.unique(n))},find:function(t){for(var n=[],r=0;r<this.length;r++)for(var i=this[r].querySelectorAll(t),a=0;a<i.length;a++)n.push(i[a]);return new e(n)},children:function(n){for(var r=[],i=0;i<this.length;i++)for(var a=this[i].childNodes,o=0;o<a.length;o++)n?1===a[o].nodeType&&t(a[o]).is(n)&&r.push(a[o]):1===a[o].nodeType&&r.push(a[o]);return new e(t.unique(r))},remove:function(){for(var e=0;e<this.length;e++)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){var e,n,r=this;for(e=0;e<arguments.length;e++){var i=t(arguments[e]);for(n=0;n<i.length;n++)r[r.length]=i[n],r.length++}return r}},t.fn=e.prototype,t.unique=function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},t}()),i=["jQuery","Zepto","Dom7"],a=0;a<i.length;a++)window[i[a]]&&e(window[i[a]]);var o;o="undefined"==typeof r?window.Dom7||window.Zepto||window.jQuery:r,o&&("transitionEnd"in o.fn||(o.fn.transitionEnd=function(e){function t(a){if(a.target===this)for(e.call(this,a),n=0;n<r.length;n++)i.off(r[n],t)}var n,r=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=this;if(e)for(n=0;n<r.length;n++)i.on(r[n],t);return this}),"transform"in o.fn||(o.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in o.fn||(o.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this})),window.Swiper=n}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper}),$(function(){$(".panel__toggle").on("click",function(){if(console.log("p"),$(this).parent().parent().hasClass("panel__active"))$(this).parent().parent().removeClass("panel__active"),$(this).html("+"),$(this).parent().next().slideUp();else{$(".accordion__panel").removeClass("panel__active"),$(".panel__toggle").html("+"),$(this).parent().parent().addClass("panel__active"),$(this).html("-");var e=$(".panel__description");e.slideUp(),$(this).parent().next().slideDown()}}),$(".panel__description").hide(),$(".panel__active").find(".panel__description").show()}),console.log("map4"),ymaps.ready(init);
//# sourceMappingURL=data:application/json;base64,
